<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>矩阵分解</title>
    <url>/2022/01/23/Question/</url>
    <content><![CDATA[<p>矩阵分解</p>
<span id="more"></span>

<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>下面有几部电影以及不同的用户给他们的评分</p>
<table>
<thead>
<tr>
<th></th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td>U1</td>
<td>5</td>
<td>3</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>U2</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>U2</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>5</td>
</tr>
<tr>
<td>U4</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>4</td>
</tr>
<tr>
<td>U5</td>
<td>0</td>
<td>1</td>
<td>5</td>
<td>4</td>
</tr>
</tbody></table>
<p>A,B,C,D代表不同的电影。U代表用户，在这里电影的评分最高为5分，0代表该位用户没有看过这部电影，我们的目的就是通过矩阵分解预测该位用户对该电影的评分。</p>
<h2 id="Talk-about"><a href="#Talk-about" class="headerlink" title="Talk about"></a>Talk about</h2><p>我们如何用矩阵分解来解决问题呢，简单来说就是：我们把原始矩阵分解成两个矩阵，然后这两个矩阵的乘积的结果为我们所预测的结果，那么我们用什么来进行呢，在这里用梯度下降来解决，我们都知道要进行梯度下降，肯定要对其求导，然后再不断迭代，所以我们首先需要构造损失函数。</p>
<h2 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h2><h3 id="构造损失函数"><a href="#构造损失函数" class="headerlink" title="构造损失函数"></a>构造损失函数</h3><p> 以上面的评分为例来说明：使用原有的评分矩阵<strong>Rm×n</strong>与重新构建的评分矩阵<strong>R^m×n</strong>进行相减求的误差的平方作为损失函数，即为<br>$$<br>e_{ij}^2=(r_{ij}-r_{ij}*)^2=(r_{ij}-\sum_{i=1}^np_{ik}q_{kj})^2<br>$$</p>
<h3 id="对损失函数求导"><a href="#对损失函数求导" class="headerlink" title="对损失函数求导"></a>对损失函数求导</h3><p>$$<br>\frac{\partial}{p_{ik}}e^2_{ij}=2(r_{ij}-\sum_{i=1}^np_{ik}q_{kj})(-q_{kj})=-2e_{ij}q_{kj}<br>$$</p>
<p>$$<br>\frac{\partial}{q_{kj}}e^2_{ij}=2(r_{ij}-\sum_{i=1}^np_{ik}q_{kj})(-p_{ik})=-2e_{ij}p_{ik}<br>$$</p>
<h3 id="根据负梯度的方向更新变量"><a href="#根据负梯度的方向更新变量" class="headerlink" title="根据负梯度的方向更新变量"></a>根据负梯度的方向更新变量</h3><p>$$<br>p_{ik}=p_{ik}-\alpha\frac{\partial}{p_{ik}}e^2_{ij}=p_{ik}+2\alpha e_{ij}q_{kj}<br>$$</p>
<p>$$<br>q_{kj}=q_{kj}-\alpha\frac{\partial}{q_{kj}}e^2_{ij}=q_{kj}+2\alpha e_{ij}p_{ik}<br>$$</p>
<p>通过不断迭代，不断更新值,可以通过迭代次数和阈值作为限制条件,下面是对上面例子的代码</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matrix_factorization</span>(<span class="params">R,P,Q,steps=<span class="number">5000</span>,alpha=<span class="number">0.0002</span>,beta=<span class="number">0.02</span></span>):</span> <span class="comment">#steps：梯度下降次数；alpha：步长；beta：β。</span></span><br><span class="line">    Q=Q.T                                       <span class="comment">#新生成的Q的转置矩阵</span></span><br><span class="line">    result=[]                                   <span class="comment">#用于储存加入正则化后的损失函数求和后的值</span></span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(steps):                   <span class="comment">#梯度下降，steps迭代次数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(R)):                 <span class="comment">#len(R)代表矩阵的行数</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(R[i])):          <span class="comment">#取每一行的列数</span></span><br><span class="line">                    eij=R[i][j]-np.dot(P[i,:],Q[:,j])       <span class="comment">#np.dot表示矩阵相乘,求得真实值与预测值之间的差</span></span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(K):</span><br><span class="line">                      <span class="keyword">if</span> R[i][j]&gt;<span class="number">0</span>:        <span class="comment">#限制评分大于零</span></span><br><span class="line">                        P[i][k]=P[i][k]+alpha*<span class="number">2</span>*eij*Q[k][j]  <span class="comment">#没加入正则化，并对损失函数求导，然后更新变量P</span></span><br><span class="line">                        Q[k][j]=Q[k][j]+alpha*<span class="number">2</span>*eij*P[i][k]  <span class="comment">#没加入正则化，并对损失函数求导，然后更新变量Q</span></span><br><span class="line">        eR=np.dot(P,Q)</span><br><span class="line">        e=<span class="number">0</span>                    <span class="comment">#用来保存损失函数求和后的值</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(R)):<span class="comment">#每一行循环</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(R[i])):<span class="comment">#每一列循环</span></span><br><span class="line">              <span class="keyword">if</span> R[i][j]&gt;<span class="number">0</span>:</span><br><span class="line">                    e=e+<span class="built_in">pow</span>(R[i][j]-np.dot(P[i,:],Q[:,j]),<span class="number">2</span>)      <span class="comment">#损失函数求和</span></span><br><span class="line">        result.append(e)</span><br><span class="line">        <span class="keyword">if</span> e&lt;<span class="number">0.001</span>:           <span class="comment">#判断是否收敛，0.001为阈值</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> P,Q.T,result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:   <span class="comment">#主函数</span></span><br><span class="line">    R=[                 <span class="comment">#原始矩阵</span></span><br><span class="line">        [<span class="number">5</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">        [<span class="number">4</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">5</span>],</span><br><span class="line">        [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>],</span><br><span class="line">        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>]</span><br><span class="line">    ]</span><br><span class="line">    R=np.array(R)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将原来的矩阵进行分解，分解为两个矩阵</span></span><br><span class="line">    N=<span class="built_in">len</span>(R)    <span class="comment">#原矩阵R的行数</span></span><br><span class="line">    M=<span class="built_in">len</span>(R[<span class="number">0</span>]) <span class="comment">#原矩阵R的列数,在这里求列数和行数，是为了P和Q相乘后与原矩阵具有相同的行和列</span></span><br><span class="line">    K=<span class="number">3</span></span><br><span class="line">    P=np.random.rand(N,K) <span class="comment">#随机生成一个 N行 K列的矩阵</span></span><br><span class="line">    Q=np.random.rand(M,K) <span class="comment">#随机生成一个 M行 K列的矩阵</span></span><br><span class="line">    nP,nQ,result=matrix_factorization(R,P,Q)<span class="comment">#nP=P，nQ=nQ.T,result=result</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输出原矩阵：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(R)         <span class="comment">#输出原矩阵</span></span><br><span class="line">    R_MF=np.dot(nP,nQ.T)<span class="comment">#矩阵的乘积</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输出新矩阵：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(R_MF)      <span class="comment">#输出新矩阵</span></span><br><span class="line">    <span class="comment">#画图</span></span><br><span class="line">    plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(result)),result)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;time&quot;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;loss&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<p>代码结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输出原矩阵：</span><br><span class="line">[[<span class="number">5</span> <span class="number">3</span> <span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">5</span> <span class="number">4</span>]]</span><br><span class="line">输出新矩阵：</span><br><span class="line">[[<span class="number">5.00452459</span> <span class="number">2.99057377</span> <span class="number">3.34415894</span> <span class="number">1.0000094</span> ]</span><br><span class="line"> [<span class="number">3.99644395</span> <span class="number">2.12740953</span> <span class="number">3.02596381</span> <span class="number">0.9991391</span> ]</span><br><span class="line"> [<span class="number">1.00818826</span> <span class="number">0.98214524</span> <span class="number">3.93019007</span> <span class="number">4.99980818</span>]</span><br><span class="line"> [<span class="number">0.99558104</span> <span class="number">0.61151817</span> <span class="number">3.4695008</span>  <span class="number">3.99900839</span>]</span><br><span class="line"> [<span class="number">2.8523312</span>  <span class="number">1.0204692</span>  <span class="number">4.99359687</span> <span class="number">4.00306171</span>]]</span><br></pre></td></tr></table></figure>

<p>在结果中，从0到现在的评分，而现在的评分便是根据矩阵分解来预测的值，每次运行的结果都不会一样，大家可以自己在电脑上跑一遍。</p>
<h2 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><table>
<thead>
<tr>
<th></th>
<th>音乐A</th>
<th>音乐B</th>
<th>音乐C</th>
<th>音乐D</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>李四</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>王五</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
<p>用矩阵分解来解决问题，并且预测评分为0的该为用户的评分</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#原始矩阵</span></span><br><span class="line">R=[</span><br><span class="line">    [<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">    ]</span><br><span class="line"><span class="comment">#矩阵分解</span></span><br><span class="line">i=<span class="built_in">len</span>(R) <span class="comment">#矩阵的行数</span></span><br><span class="line">j=<span class="built_in">len</span>(R[<span class="number">1</span>]) <span class="comment">#矩阵列数</span></span><br><span class="line">K=<span class="number">4</span> <span class="comment">#自定义</span></span><br><span class="line"><span class="comment">#初始化矩阵P,Q</span></span><br><span class="line">P=np.random.rand(i,K)</span><br><span class="line">Q=np.random.rand(j,K)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matrix_factorization</span>(<span class="params">R,P,Q,steps=<span class="number">5000</span>,alpha=<span class="number">0.002</span>,beta=<span class="number">0.02</span></span>):</span></span><br><span class="line">    Q=Q.T    <span class="comment">#把矩阵Q进行转置</span></span><br><span class="line">    result=[] <span class="comment">#用来存放损失值</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(steps):  <span class="comment">#循环次数</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(j):</span><br><span class="line">                emn=R[m][n]-np.dot(P[m,:],Q[:,n])   <span class="comment">#求真实值与预测值之间的差</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(K):</span><br><span class="line">                    <span class="keyword">if</span> R[m][n]&gt;<span class="number">0</span>:</span><br><span class="line">                        P[m][k]=P[m][k]+<span class="number">2</span>*alpha*emn*Q[k][n]  <span class="comment">#不断进行迭代</span></span><br><span class="line">                        Q[k][n]=Q[k][n]+<span class="number">2</span>*alpha*emn*P[m][k]</span><br><span class="line">        er=np.dot(P,Q)</span><br><span class="line">        errs=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(j):</span><br><span class="line">                <span class="keyword">if</span> R[m][n]&gt;<span class="number">0</span>:</span><br><span class="line">                    errs=errs+<span class="built_in">pow</span>(R[m][n]-np.dot(P[m,:],Q[:,n]),<span class="number">2</span>)</span><br><span class="line">        result.append(errs)</span><br><span class="line">        <span class="keyword">if</span> e&lt;<span class="number">0.01</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> P,Q,result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:   <span class="comment">#主函数</span></span><br><span class="line"></span><br><span class="line">    nP, nQ, result = matrix_factorization(R,P,Q)  <span class="comment"># nP=P，nQ=nQ.T,result=result</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输出原矩阵：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(R)  <span class="comment"># 输出原矩阵</span></span><br><span class="line">    PQ = np.dot(nP, nQ)  <span class="comment"># 矩阵的乘积</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输出新矩阵：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(PQ)  <span class="comment"># 输出新矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画图</span></span><br><span class="line">    plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(result)), result)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;time&quot;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;loss&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输出原矩阵：</span><br><span class="line">[[<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line">输出新矩阵：</span><br><span class="line">[[<span class="number">1.99999868</span> <span class="number">1.00000397</span> <span class="number">1.05918112</span> <span class="number">1.35555345</span>]</span><br><span class="line"> [<span class="number">2.02415177</span> <span class="number">0.99999573</span> <span class="number">1.00000269</span> <span class="number">1.60004216</span>]</span><br><span class="line"> [<span class="number">1.61464006</span> <span class="number">1.01358857</span> <span class="number">0.99999818</span> <span class="number">1.00000057</span>]]</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>数据集归一化</title>
    <url>/2022/01/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E9%9B%86%E5%BD%92%E4%B8%80%E5%8C%96/</url>
    <content><![CDATA[<p>机器学习数据集归一化</p>
<span id="more"></span>

<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>当出现欠拟合和过度拟合的情况下如何处理：</p>
<p><strong>有两种方式：</strong></p>
<p><strong>1. 丢弃一些不能帮助我们正确预测的特征。采用的方法如下：</strong></p>
<ul>
<li> <strong>手工选择保留哪些特征。</strong></li>
<li><strong>使用一些模型选择算法来帮忙降维。（例如PCA等）</strong></li>
</ul>
<p><strong>2. 归一化处理</strong></p>
<ul>
<li> <strong>保留所有的特征，但是减少参数的大小（或者是说：减少参数的重要性）</strong></li>
</ul>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​      不同的评价指标往往具有不同的量纲（例如：对于评价房价来说量纲指：面积、房价数、楼层等；对于预测某个人患病率来说量纲指：身高、体重等。）和量纲单位（例如：面积单位：平方米、平方厘米等；身高：米、厘米等），这样的情况会影响到数据分析的结果，为了消除指标之间量纲的影响，需要进行数据标准化处理，以解决数据指标之间的可比性。原始数据经过数据标准化处理后，各指标处于同一数量级，适合进行综合对比评价。</p>
<h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p><strong>（1）归一化后加快了梯度下降求最优解的速度。</strong></p>
<p><strong>（2）归一化有可能提高精度（归一化是让不同维度之间的特征在数值上有一定的比较性）。</strong></p>
<h5 id="理解-1-："><a href="#理解-1-：" class="headerlink" title="理解(1)："></a>理解(1)：</h5><p>   例子：假定为了预测房子价格，自变量为面积，房间数两个，因变量为房价。</p>
<p>那么可以得到的公式为：<br>$$<br>y=\theta_1x_1+\theta_2x_2<br>$$<br>其中x1代表房子的面积,x2代表房间的多少,那么前面的就是他们的系数</p>
<p>假如有一张图,我们很容易看出，当数据没有归一化的时候，面积数的范围可以从0-1000，房间数的范围一般为0-10，可以看出面积数的取值范围远大于房间数。</p>
<h6 id="归一化和没有归一化的影响："><a href="#归一化和没有归一化的影响：" class="headerlink" title="归一化和没有归一化的影响："></a>归一化和没有归一化的影响：</h6><p>是否进行归一化产生的影响在于形成损失函数的时候：</p>
<p>​    如果数据没有进行归一化：<br>$$<br>J=(10\theta_1+600\theta_2-y)^2<br>$$<br>   当数据归一化以后为：<br>$$<br>J=(0.5\theta_1+0.55\theta_2-y)^2<br>$$<br>  其中变量的前面系数都在【0-1】范围之间。</p>
<h5 id="理解-2"><a href="#理解-2" class="headerlink" title="理解(2):"></a>理解(2):</h5><p>​     归一化有可能提高精度（归一化是让不同维度之间的特征在数值上有一定的比较性）.一些分类器需要计算样本之间的距离（如欧式距离），例如KNN。如果一个特征值域范围非常大，那么距离计算就主要取决于这个特征，从而与实际情况不符。（比如，这时实际情况是值域范围小的特征更重要）。</p>
<h3 id="两种常用的归一化方法："><a href="#两种常用的归一化方法：" class="headerlink" title="两种常用的归一化方法："></a>两种常用的归一化方法：</h3><h4 id="（1）min-max标准化"><a href="#（1）min-max标准化" class="headerlink" title="（1）min-max标准化"></a>（1）min-max标准化</h4><p>min-max标准化（Min-Max Normalization）（线性函数归一化）</p>
<h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h5><p>   也称为离差标准化，是对原始数据的线性变换，使得结果映射到0-1之间。</p>
<h5 id="本质："><a href="#本质：" class="headerlink" title="本质："></a>本质：</h5><p>​     把数变为(0,1)之间的小数。转换函数：（X-Min）/(Max-Min)如果想要将数据映射到(-1,1)，则将公式换成: (X-Mean）/(Max-Min)其中：max为样本数据的最大值，min为样本数据的最小值，Mean表示数据的均值。</p>
<h5 id="缺陷："><a href="#缺陷：" class="headerlink" title="缺陷："></a>缺陷：</h5><p>当有新数据加入时，可导致max和min的变化，需要重新定义。</p>
<h4 id="（2）Z-score标准化方法"><a href="#（2）Z-score标准化方法" class="headerlink" title="（2）Z-score标准化方法"></a>（2）Z-score标准化方法</h4><p> 均值标准化（Z-score standardization）</p>
<h5 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h5><p>​    这种方法给与原始数据的均值（mean）和标准差（standard deviation）进行数据的标准化。经过处理的数据符合标准正态分布，即均值为0，标准差为1.</p>
<h5 id="本质：-1"><a href="#本质：-1" class="headerlink" title="本质："></a>本质：</h5><p>   把有量纲表达式变成无量纲表达式。转换函数：（X-Mean）/(Standard deviation)其中，Mean为所有样本数据的均值。Standard deviation为所有样本数据的标准差。</p>
<h3 id="两种归一化方法的使用场景"><a href="#两种归一化方法的使用场景" class="headerlink" title="两种归一化方法的使用场景"></a>两种归一化方法的使用场景</h3><p>（1）在分类、聚类算法中，需要使用距离来度量相似性的时候、或者使用PCA技术进行降维的时候，第二种方法(Z-score standardization)表现更好。</p>
<p>因为：第一种方法(线性变换后)，其协方差产生了倍数值的缩放，因此这种方式无法消除量纲对方差、协方差的影响，对PCA分析影响巨大；同时，由于量纲的存在，使用不同的量纲、距离的计算结果会不同。</p>
<p>（2）在不涉及距离度量、协方差计算、数据不符合正太分布的时候，可以使用第一种方法或其他归一化方法。比如图像处理中，将RGB图像转换为灰度图像后将其值限定在（0 ，255）的范围。</p>
<p>因为：第二种归一化方式中，新的数据由于对方差进行了归一化，这时候每个维度的量纲其实已经等价了，每个维度都服从均值为0、方差1的正态分布，在计算距离的时候，每个维度都是去量纲化的，避免了不同量纲的选取对距离计算产生的巨大影响。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>（1）使用Max-Min标准化后，其协方差产生了倍数值得缩放，因此这种方式无法消除量纲对方差、协方差的影响，对PCA分析影响巨大；同时由于量纲的存在，使用不同的量纲，距离的计算结果会不同。</p>
<p>（2）在Z-score标准化（0均值标准化）中，新的数据由于对方差进行了归一化，这时候每个维度的量纲其实已经等价了，每个维度都服从均值为0,、方差为1的正态分布，在计算距离的时候，每个维度都是去量纲化的，避免了不同量纲的选取对距离计算产生的巨大影响。</p>
<p>总的来说，在算法后续计算中，涉及距离度量（聚类分析）或者协方差分析（PCA、LDA等）的，同时数据分布可以近似为状态分布，应当使用0均值化的归一方法。其它应用中，根据具体情况选用合适的归一化方法。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/program_developer/article/details/78637711">https://blog.csdn.net/program_developer/article/details/78637711</a></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>K-means</title>
    <url>/2022/01/29/K--means/</url>
    <content><![CDATA[<p>K-means及其作业</p>
<span id="more"></span>
<h2 id="K–means"><a href="#K–means" class="headerlink" title="K–means"></a>K–means</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>​       K–means又称K–均值算法，聚类与分类算法的最大区别在于, 分类的目标类别已知(监督学习), 而聚类的目标类别是未知的(无监督学习)。K-Means算法(K-均值算法)就是无监督算法之一，主要用于样本的聚类。其思想很简单，对于给定的样本集，按照样本与聚类中心之间的距离大小，将样本集划分为K个簇。让簇内的点尽量紧密的连接在一起,让簇间的距离尽量的大。</p>
<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><h4 id="步骤描述"><a href="#步骤描述" class="headerlink" title="步骤描述"></a>步骤描述</h4><p>1）数据准备:需要数值型数据类计算距离, 也可以将标称型数据映射为二值型数据再用于距离计算。</p>
<p>2）对于未聚类数据集，首先随机初始化 K 个（代表拟聚类簇个数）中心点，如图红色五角星所示。</p>
<p>3） 每一个样本按照距离自身最近的中心点进行聚类(<strong>计算距离</strong>)，等效于通过两中心点连线的中垂线划分区域。</p>
<p>4）依据上次聚类结果，移动中心点到个簇的质心位置(新的质心的位置为新簇内点的x和y分别的的平均值)，并将此质心作为新的中心点</p>
<p>5）反复迭代，直至中心点的变化满足收敛条件（变化很小或几乎不变化），最终得到聚类结果。</p>
<h3 id="距离计算方法"><a href="#距离计算方法" class="headerlink" title="距离计算方法"></a>距离计算方法</h3><p>这里的距离指的是平面上两个点的直线距离。常用的距离计算公式有：</p>
<ol>
<li>闵可夫斯基距离</li>
<li>欧几里得距离</li>
<li>曼哈顿距离</li>
<li>切比雪夫距离</li>
<li>马氏距离</li>
<li>余弦相似度</li>
<li>皮尔逊相关系数</li>
<li>汉明距离</li>
<li>杰卡德相似系数</li>
<li>编辑距离</li>
<li>DTW 距离</li>
<li>KL 散度</li>
</ol>
<h3 id="K值选择"><a href="#K值选择" class="headerlink" title="K值选择"></a>K值选择</h3><p>1）手肘法</p>
<p>在介绍之前我们先了解一个概念:SSE(sum of the squared errors，误差平方和)</p>
<p>手肘法的核心思想：</p>
<ul>
<li>随着聚类数k的增大，样本划分会更加精细，每个簇的聚合程度会逐渐提高，那么误差平方和SSE自然会逐渐变小。</li>
<li>当k小于真实聚类数时，由于k的增大会大幅增加每个簇的聚合程度，故SSE的下降幅度会很大，而当k到达真实聚类数时，再增加k所得到的聚合程度回报会迅速变小，所以SSE的下降幅度会骤减，然后随着k值的继续增大而趋于平缓，也就是说SSE和k的关系图是一个手肘的形状，而这个肘部对应的k值就是数据的真实聚类数。</li>
</ul>
<p>2）轮廓系数</p>
<p>使用轮廓系数(silhouette coefficient)来确定，选择使系数较大所对应的k值</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h4><ol>
<li>属于无监督学习，无须准备训练集；</li>
<li>原理简单，实现起来较为容易；</li>
<li>结果可解释性较好。</li>
</ol>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>聚类数目k是一个输入参数。选择不恰当的k值可能会导致糟糕的聚类结果，这也是为什么要进行特征检查来决定数据集的聚类数目了；</li>
<li>可能收敛到局部最小值, 在大规模数据集上收敛较慢；</li>
<li>对于异常点、离群点敏感。</li>
</ol>
<h3 id="本次运用的公式"><a href="#本次运用的公式" class="headerlink" title="本次运用的公式"></a>本次运用的公式</h3><p>更新质心公式</p>
<p>就是新的质心的值等于当前该质心所属簇的所有点的平均值<br>$$<br>c_j=(1/N_j)\sum_{i=1}^{N_j}x_i,y_i<br>$$</p>
<h3 id="传统K-means改进"><a href="#传统K-means改进" class="headerlink" title="传统K-means改进"></a>传统K-means改进</h3><p>在学习了传统K-means算法的基础上,我们清楚了K-means的局限性,因此我们将要说一下K-Means的优化变体方法。这其中包括初始化优化K-Means++, 距离计算优化elkan K-Means算法和大数据情况下的优化Mini Batch K-Means算法。</p>
<h4 id="K-means"><a href="#K-means" class="headerlink" title="K-means++"></a>K-means++</h4><p>在学习K-means算法时我们提到，k个初始化的质心的位置选择对最后的聚类结果和运行时间都有很大的影响，因此需要选择合适的k个质心。如果仅仅是完全随机的选择，有可能导致算法收敛很慢。K-Means++算法就是对K-Means随机初始化质心的方法的优化。</p>
<h4 id="elkan-K-means"><a href="#elkan-K-means" class="headerlink" title="elkan K-means"></a>elkan K-means</h4><p>在传统的K-Means算法中，我们在每轮迭代时，要计算所有的样本点到所有的质心的距离，这样会比较的耗时。那么，对于距离的计算有没有能够简化的地方呢？elkan K-Means算法就是从这块入手加以改进。它的目标是减少不必要的距离的计算。</p>
<h4 id="Mini-Batch-K-means"><a href="#Mini-Batch-K-means" class="headerlink" title="Mini Batch K-means"></a>Mini Batch K-means</h4><p>在统的K-Means算法中，要计算所有的样本点到所有的质心的距离。如果样本量非常大，比如达到10万以上，特征有100以上，此时用传统的K-Means算法非常的耗时，就算加上elkan K-Means优化也依旧。在大数据时代，这样的场景越来越多。此时Mini Batch K-Means应运而生。</p>
<p>顾名思义，Mini Batch，也就是用样本集中的一部分的样本来做传统的K-Means，这样可以避免样本量太大时的计算难题，算法收敛速度大大加快。当然此时的代价就是我们的聚类的精确度也会有一些降低。一般来说这个降低的幅度在可以接受的范围之内。</p>
<p>**注意:**此部分为扩展内容,如果你想真正的去优化你的算法,更详细的优化步骤你可以去<a href="https://www.cnblogs.com/pinard/p/6164214.html">刘建平Pinard-K-Means聚类算法原理</a>或者是<a href="http://www.baidu.com/">百度一下</a>。</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findCentroids</span>(<span class="params">data_get, k</span>):</span>    <span class="comment"># 随机获取k个质心</span></span><br><span class="line">    <span class="keyword">return</span> random.sample(data_get, k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculateDistance</span>(<span class="params">vecA, vecB</span>):</span>    <span class="comment"># 计算向量vecA和向量vecB之间的欧氏距离</span></span><br><span class="line">    <span class="keyword">return</span> numpy.sqrt(numpy.<span class="built_in">sum</span>(numpy.square(vecA - vecB)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDistance</span>(<span class="params">data_get, centroidList</span>):</span></span><br><span class="line">    <span class="comment"># 计算data_get中的元素与centroidList中k个聚类中心的欧式距离，找出距离最小的</span></span><br><span class="line">    <span class="comment"># 将该元素加入相应的聚类中</span></span><br><span class="line">    clusterDict = <span class="built_in">dict</span>()  <span class="comment"># 用字典存储聚类结果</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> data_get:</span><br><span class="line">        vecA = numpy.array(element)  <span class="comment"># 转换成数组形式</span></span><br><span class="line">        flag = <span class="number">0</span>  <span class="comment"># 元素分类标记，记录与相应聚类距离最近的那个类</span></span><br><span class="line">        minDis = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)  <span class="comment"># 初始化为最大值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(centroidList)):</span><br><span class="line">            vecB = numpy.array(centroidList[i])</span><br><span class="line">            distance = calculateDistance(vecA, vecB)  <span class="comment"># 两向量间的欧式距离</span></span><br><span class="line">            <span class="keyword">if</span> distance &lt; minDis:</span><br><span class="line">                minDis = distance</span><br><span class="line">                flag = i  <span class="comment"># 保存与当前item距离最近的那个聚类的标记</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag <span class="keyword">not</span> <span class="keyword">in</span> clusterDict.keys():  <span class="comment"># 簇标记不存在，进行初始化</span></span><br><span class="line">            clusterDict[flag] = <span class="built_in">list</span>()</span><br><span class="line">        clusterDict[flag].append(element)  <span class="comment"># 加入相应的类中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clusterDict  <span class="comment"># 返回新的聚类结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCentroids</span>(<span class="params">clusterDict</span>):</span></span><br><span class="line">    centroidList = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> clusterDict.keys():</span><br><span class="line">        centroid = numpy.mean(numpy.array(clusterDict[key]), axis=<span class="number">0</span>)  <span class="comment"># 求聚类中心即求解每列的均值</span></span><br><span class="line">        centroidList.append(centroid)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> numpy.array(centroidList).tolist()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_Var</span>(<span class="params">clusterDict, centroidList</span>):</span></span><br><span class="line">    <span class="comment"># 计算聚类间的均方误差</span></span><br><span class="line">    <span class="comment"># 将类中各个向量与聚类中心的距离进行累加求和</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> clusterDict.keys():</span><br><span class="line">        vecA = numpy.array(centroidList[key])</span><br><span class="line">        distance = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> clusterDict[key]:</span><br><span class="line">            vecB = numpy.array(item)</span><br><span class="line">            distance += calculateDistance(vecA, vecB)</span><br><span class="line">        <span class="built_in">sum</span> += distance</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showCluster</span>(<span class="params">centroidList, clusterDict</span>):</span></span><br><span class="line">    <span class="comment"># 画聚类结果</span></span><br><span class="line">    colorMark = [<span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;ob&#x27;</span>, <span class="string">&#x27;og&#x27;</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;oy&#x27;</span>, <span class="string">&#x27;ow&#x27;</span>]  <span class="comment"># 元素标记</span></span><br><span class="line">    centroidMark = [<span class="string">&#x27;dr&#x27;</span>, <span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;dg&#x27;</span>, <span class="string">&#x27;dk&#x27;</span>, <span class="string">&#x27;dy&#x27;</span>, <span class="string">&#x27;dw&#x27;</span>]  <span class="comment"># 聚类中心标记</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> clusterDict.keys():</span><br><span class="line">        plt.plot(centroidList[key][<span class="number">0</span>], centroidList[key][<span class="number">1</span>], centroidMark[key], markersize=<span class="number">12</span>)  <span class="comment"># 画聚类中心</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> clusterDict[key]:</span><br><span class="line">            plt.plot(item[<span class="number">0</span>], item[<span class="number">1</span>], colorMark[key])  <span class="comment"># 画类下的点</span></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = [[<span class="number">0.0</span>, <span class="number">0.0</span>], [<span class="number">3.0</span>, <span class="number">8.0</span>], [<span class="number">2.0</span>, <span class="number">2.0</span>], [<span class="number">1.0</span>, <span class="number">1.0</span>], [<span class="number">5.0</span>, <span class="number">3.0</span>],</span><br><span class="line">        [<span class="number">4.0</span>, <span class="number">8.0</span>], [<span class="number">6.0</span>, <span class="number">3.0</span>], [<span class="number">5.0</span>, <span class="number">4.0</span>], [<span class="number">6.0</span>, <span class="number">4.0</span>], [<span class="number">7.0</span>, <span class="number">5.0</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    centroidList = findCentroids(data, <span class="number">3</span>)  <span class="comment"># 随机获取3个聚类中心</span></span><br><span class="line">    clusterDict = minDistance(data, centroidList)  <span class="comment"># 第一次聚类迭代</span></span><br><span class="line">    newVar = calculate_Var(clusterDict, centroidList)  <span class="comment"># 计算均方误差值，通过新旧均方误差来获得迭代终止条件</span></span><br><span class="line">    oldVar = -<span class="number">0.0001</span>  <span class="comment"># 初始化均方误差</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;***** 第1次迭代 *****&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> clusterDict.keys():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;聚类中心: &#x27;</span>, centroidList[key])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;对应聚类: &#x27;</span>,clusterDict[key])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;平均均方误差: &#x27;</span>, newVar)</span><br><span class="line">    showCluster(centroidList, clusterDict)  <span class="comment"># 展示聚类结果</span></span><br><span class="line"></span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">abs</span>(newVar - oldVar) &gt;= <span class="number">0.0001</span>:  <span class="comment"># 当连续两次聚类结果差距小于0.0001时，迭代结束</span></span><br><span class="line">        centroidList = getCentroids(clusterDict)  <span class="comment"># 获得新的聚类中心</span></span><br><span class="line">        clusterDict = minDistance(data, centroidList)  <span class="comment"># 新的聚类结果</span></span><br><span class="line">        oldVar = newVar</span><br><span class="line">        newVar = calculate_Var(clusterDict, centroidList)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;***** 第%d次迭代 *****&#x27;</span> % k)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> clusterDict.keys():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;聚类中心: &#x27;</span>, centroidList[key])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;对应聚类: &#x27;</span>, clusterDict[key])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;平均均方误差: &#x27;</span>, newVar)</span><br><span class="line">        showCluster(centroidList, clusterDict)  <span class="comment"># 展示聚类结果</span></span><br><span class="line">        k += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><p>对代码进行补充</p>
<p>完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> uniform</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#创建一个数据集。</span></span><br><span class="line"><span class="comment">#注意：本方法创建的数据集每次运行结果都不相同</span></span><br><span class="line">m = <span class="number">60</span> <span class="comment">#数据个数</span></span><br><span class="line">data = [[],[]] <span class="comment">#[[存储 x 轴数据],[存储 y 轴数据]]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">if</span> i &lt; m/<span class="number">3</span>: </span><br><span class="line">        data[<span class="number">0</span>].append(uniform(<span class="number">1</span>,<span class="number">5</span>))<span class="comment">#随机设定</span></span><br><span class="line">        data[<span class="number">1</span>].append(uniform(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">    <span class="keyword">elif</span> i &lt; <span class="number">2</span>*m/<span class="number">3</span>:</span><br><span class="line">        data[<span class="number">0</span>].append(uniform(<span class="number">6</span>,<span class="number">10</span>))</span><br><span class="line">        data[<span class="number">1</span>].append(uniform(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data[<span class="number">0</span>].append(uniform(<span class="number">3</span>,<span class="number">8</span>))</span><br><span class="line">        data[<span class="number">1</span>].append(uniform(<span class="number">5</span>,<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(data) <span class="comment">#输出初始化的数据</span></span><br><span class="line"><span class="comment">#将创建的数据集画成散点图</span></span><br><span class="line">plt.scatter(data[<span class="number">0</span>],data[<span class="number">1</span>])</span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">11</span>)     <span class="comment">#设置x轴坐标范围</span></span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">11</span>)     <span class="comment">#设置y轴坐标范围</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义欧几里得距离计算1,2距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distEuclid</span>(<span class="params">x1,y1,x2,y2</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sqrt((x1-x2)**<span class="number">2</span>+(y1-y2)**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">cent0 = [uniform(<span class="number">2</span>,<span class="number">9</span>),uniform(<span class="number">2</span>,<span class="number">9</span>)] <span class="comment">#定义 K=3 个质心，随机赋值</span></span><br><span class="line">cent1 = [uniform(<span class="number">2</span>,<span class="number">9</span>),uniform(<span class="number">2</span>,<span class="number">9</span>)] <span class="comment">#[x,y]</span></span><br><span class="line">cent2 = [uniform(<span class="number">2</span>,<span class="number">9</span>),uniform(<span class="number">2</span>,<span class="number">9</span>)]</span><br><span class="line">mark = [] <span class="comment">#标记列表</span></span><br><span class="line">dist = [[],[],[]]<span class="comment">#各质心到所有点的距离列表</span></span><br><span class="line"><span class="comment">#核心</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):                                           <span class="comment">#跌代次数</span></span><br><span class="line">    <span class="comment">#计算K个质心到所有点data的距离</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        dist[<span class="number">0</span>].append(distEuclid(cent0[<span class="number">0</span>],cent0[<span class="number">1</span>],data[<span class="number">0</span>][i],data[<span class="number">1</span>][i]))</span><br><span class="line">        dist[<span class="number">1</span>].append(distEuclid(cent1[<span class="number">0</span>],cent1[<span class="number">1</span>],data[<span class="number">0</span>][i],data[<span class="number">1</span>][i]))</span><br><span class="line">        dist[<span class="number">2</span>].append(distEuclid(cent2[<span class="number">0</span>],cent2[<span class="number">1</span>],data[<span class="number">0</span>][i],data[<span class="number">1</span>][i]))</span><br><span class="line">    <span class="comment">#对数据进行整理</span></span><br><span class="line">    sum0_x = sum0_y = sum1_x = sum1_y = sum2_x = sum2_y = <span class="number">0</span></span><br><span class="line">    number0 = number1 = number2 = <span class="number">0</span></span><br><span class="line">    <span class="comment">#按距离分类</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">if</span> dist[<span class="number">0</span>][i]&lt;dist[<span class="number">1</span>][i] <span class="keyword">and</span> dist[<span class="number">0</span>][i]&lt;dist[<span class="number">2</span>][i]:</span><br><span class="line">            mark.append(<span class="number">0</span>)                                    <span class="comment">#标记不同的质心</span></span><br><span class="line">            sum0_x += data[<span class="number">0</span>][i]</span><br><span class="line">            sum0_y += data[<span class="number">1</span>][i]</span><br><span class="line">            number0 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> dist[<span class="number">1</span>][i]&lt;dist[<span class="number">0</span>][i] <span class="keyword">and</span> dist[<span class="number">1</span>][i]&lt;dist[<span class="number">2</span>][i]:</span><br><span class="line">            mark.append(<span class="number">1</span>)                                    <span class="comment">#标记不同的质心</span></span><br><span class="line">            sum1_x += data[<span class="number">0</span>][i]</span><br><span class="line">            sum1_y += data[<span class="number">1</span>][i]</span><br><span class="line">            number1 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> dist[<span class="number">2</span>][i]&lt;dist[<span class="number">0</span>][i] <span class="keyword">and</span> dist[<span class="number">2</span>][i]&lt;dist[<span class="number">1</span>][i]:</span><br><span class="line">            mark.append(<span class="number">2</span>)                                    <span class="comment">#标记不同的质心</span></span><br><span class="line">            sum2_x += data[<span class="number">0</span>][i]</span><br><span class="line">            sum2_y += data[<span class="number">1</span>][i]</span><br><span class="line">            number2 += <span class="number">1</span>    </span><br><span class="line">    <span class="comment">#按公式更新质心</span></span><br><span class="line">    cent0 = [sum0_x/number0,sum0_y/number0]</span><br><span class="line">    cent1 = [sum1_x/number1,sum1_y/number1]</span><br><span class="line">    cent2 = [sum2_x/number2,sum2_y/number2]</span><br><span class="line"><span class="comment">#画图</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):   <span class="comment">#不同的质心用不同的颜色画出</span></span><br><span class="line">    <span class="keyword">if</span> mark[i] == <span class="number">0</span>:</span><br><span class="line">        plt.scatter(data[<span class="number">0</span>][i],data[<span class="number">1</span>][i],color=<span class="string">&#x27;red&#x27;</span>)  </span><br><span class="line">    <span class="keyword">if</span> mark[i] == <span class="number">1</span>:</span><br><span class="line">        plt.scatter(data[<span class="number">0</span>][i],data[<span class="number">1</span>][i],color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> mark[i] == <span class="number">2</span>:</span><br><span class="line">        plt.scatter(data[<span class="number">0</span>][i],data[<span class="number">1</span>][i],color=<span class="string">&#x27;green&#x27;</span>)     </span><br><span class="line">plt.scatter(cent0[<span class="number">0</span>],cent0[<span class="number">1</span>],marker=<span class="string">&#x27;*&#x27;</span>,color=<span class="string">&#x27;red&#x27;</span>)  <span class="comment">#画出最后更新的质心cent0</span></span><br><span class="line">plt.scatter(cent1[<span class="number">0</span>],cent1[<span class="number">1</span>],marker=<span class="string">&#x27;*&#x27;</span>,color=<span class="string">&#x27;blue&#x27;</span>) <span class="comment">#画出最后更新的质心cent1</span></span><br><span class="line">plt.scatter(cent2[<span class="number">0</span>],cent2[<span class="number">1</span>],marker=<span class="string">&#x27;*&#x27;</span>,color=<span class="string">&#x27;green&#x27;</span>) <span class="comment">#画出最后更新的质心cent2</span></span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">11</span>) <span class="comment">#规定x轴坐标范围</span></span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">11</span>) <span class="comment">#规定y轴坐标范围</span></span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#上述代码数据选择是随机生成的，每次运行结果是不同的，分类结果有好有坏。</span></span><br></pre></td></tr></table></figure>

<p>理论参考链接：<a href="https://stoic-shaw-839c64.netlify.app/ai/knn/">https://stoic-shaw-839c64.netlify.app/ai/knn/</a></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>KNN</title>
    <url>/2022/01/28/KNN/</url>
    <content><![CDATA[<p>KNN及其作业</p>
<span id="more"></span>

<h3 id="KNN算法原理"><a href="#KNN算法原理" class="headerlink" title="KNN算法原理"></a>KNN算法原理</h3><p>​    KNN得全称是K Nearest Neighbors,也被称作最邻近算法，k是指k个最近的邻居的意思，KNN属于一种分类算法。</p>
<p>​    KNN算法的思路是：如果一个样本在特征空间中的k个最邻近的样本中的大多数属于某一个类别，则该样本也划分为这个类别。KNN算法中，所选择的邻居都是已经正确分类的对象。该方法在定类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。</p>
<p>​    那么我们如何更好的进行了解呢，图示无疑是最好理解的， 我们要确定绿点属于哪个颜色（红色或者蓝色），要做的就是选出距离目标点距离最近的k个点，看这k个点的大多数颜色是什么颜色。当k取3的时候，我们可以看出距离最近的三个，分别是红色、红色、蓝色，因此得到目标点为红色。</p>
<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><h4 id="步骤描述"><a href="#步骤描述" class="headerlink" title="步骤描述"></a>步骤描述</h4><p>1）计算测试数据与各个训练数据之间的距离；</p>
<p>2）按照距离的递增关系进行排序；</p>
<p>3）选取距离最小的K个点；</p>
<p>4）确定前K个点所在类别的出现频率；</p>
<p>5）返回前K个点中出现频率最高的类别(决策依据方法之一)作为测试数据的预测分类。</p>
<p>简单来说就是：准备数据，计算距离，数据排序，确定K值，寻找邻居，决策分类</p>
<h4 id="距离计算的方法"><a href="#距离计算的方法" class="headerlink" title="距离计算的方法"></a>距离计算的方法</h4><p>这里的距离指的是平面上两个点的直线距离。常用的距离计算公式有：</p>
<ol>
<li>闵可夫斯基距离</li>
<li>欧几里得距离</li>
<li>曼哈顿距离</li>
<li>切比雪夫距离</li>
<li>马氏距离</li>
<li>余弦相似度</li>
<li>皮尔逊相关系数</li>
<li>汉明距离</li>
<li>杰卡德相似系数</li>
<li>编辑距离</li>
<li>DTW 距离</li>
<li>KL 散度</li>
</ol>
<h4 id="欧式距离"><a href="#欧式距离" class="headerlink" title="欧式距离"></a>欧式距离</h4><p>欧式距离全称欧几里得距离，公式为：<br>$$<br>d=\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}<br>$$</p>
<h4 id="K值的选择"><a href="#K值的选择" class="headerlink" title="K值的选择"></a>K值的选择</h4><p>K称为临近数，即在预测目标点时取几个临近的点来预测。</p>
<p>K值得选取非常重要，因为：</p>
<ol>
<li>如果当K的取值过小时，一旦有噪声得成分存在们将会对预测产生比较大影响，例如取K值为1时，一旦最近的一个点是噪声，那么就会出现偏差，K值的减小就意味着整体模型变得复杂，容易发生<strong>过拟合</strong>；</li>
<li>如果K的值取的过大时，就相当于用较大邻域中的训练实例进行预测，学习的近似误差会增大。这时与输入目标点较远实例也会对预测起作用，使预测发生错误。K值的增大就意味着整体的模型变得简单，也就是容易发生<strong>欠拟合</strong>；</li>
<li>如果K=N的时候，那么就是取全部的实例，即为取实例中某分类下最多的点，就对预测没有什么实际的意义了；</li>
</ol>
<p>为此我们可以这样取K的值:</p>
<ol>
<li>从k=1开始，使用检验集估计分类器的误差率。重复该过程，每次K增值1，允许增加一个近邻。选取产生最小误差率的K；</li>
<li>一般k的取值不超过20，上限是n的开方，随着数据集的增大，K的值也要增大；</li>
<li>K的取值尽量要<strong>取奇数</strong>，以保证在计算结果最后会产生一个较多的类别，如果取偶数可能会产生相等的情况，不利于预测。</li>
</ol>
<h4 id="关于决策依据-规则"><a href="#关于决策依据-规则" class="headerlink" title="关于决策依据/规则"></a>关于决策依据/规则</h4><p>最常用的决策规则是：</p>
<ol>
<li>多数表决法(更常用)：多数表决法类似于投票的过程，也就是在 K 个邻居中选择类别最多的种类作为测试样本的类别；</li>
<li>加权表决法：根据距离的远近，对近邻的投票进行加权，距离越近则权重越大，通过权重计算结果最大值的类为测试样本的类别。</li>
</ol>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>1）简单好用，容易理解，精度高，理论成熟，既可以用来做分类也可以用来做回归；</p>
<p>2）可用于数值型数据和离散型数据；</p>
<p>3）训练时间复杂度为O(n)；无数据输入假定；</p>
<p>4）对异常值不敏感。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>1）计算复杂性高；空间复杂性高；</p>
<p>2）样本不平衡问题（即有些类别的样本数量很多，而其它样本的数量很少）；</p>
<p>3）一般数值很大的时候不用这个，计算量太大。但是单个样本又不能太少，否则容易发生误分；</p>
<p>4）最大的缺点是无法给出数据的内在含义。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>上面的内容大部分是引用的别人写的，代码部分是我在他的代码的理解基础上重新敲的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#time/2022/1/28</span></span><br><span class="line"><span class="comment">#调用库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化原始数据</span></span><br><span class="line">data=[[<span class="number">1</span>,<span class="number">0.9</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0.1</span>,<span class="number">0.2</span>],[<span class="number">0</span>,<span class="number">0.1</span>]]</span><br><span class="line">labels=[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;B&quot;</span>]</span><br><span class="line">test_data=[[<span class="number">0.1</span>,<span class="number">0.3</span>]]</span><br><span class="line"><span class="comment">#print(labels)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制初始化数据散点图</span></span><br><span class="line"><span class="comment">#print(data[0][1])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===============================数据准备================================&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始数据图像绘制...&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    plt.scatter(data[i][<span class="number">0</span>],data[i][<span class="number">1</span>],color=<span class="string">&quot;b&quot;</span>)</span><br><span class="line">plt.scatter(test_data[<span class="number">0</span>][<span class="number">0</span>],test_data[<span class="number">0</span>][<span class="number">1</span>],color=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#采用距离方式进行计算</span></span><br><span class="line">x=[[<span class="number">0.1</span>,<span class="number">0.3</span>]]</span><br><span class="line">distance=[]</span><br><span class="line">labels_xy=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    d=<span class="number">0</span></span><br><span class="line">    d=sqrt((x[<span class="number">0</span>][<span class="number">0</span>]-data[i][<span class="number">0</span>])**<span class="number">2</span>+(x[<span class="number">0</span>][<span class="number">1</span>]-data[i][<span class="number">1</span>])**<span class="number">2</span>)</span><br><span class="line">    distance.append(d)</span><br><span class="line">    labels_xy.append(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;计算的距离为: &quot;</span>,distance)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;现在对应的标签位置为: &quot;</span>,labels_xy)</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照升序，对距离进行排序并取前三个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===============================距离排序================================&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(data)):</span><br><span class="line">        <span class="keyword">if</span> distance[i] &gt; distance[j]:</span><br><span class="line">            distance[i],distance[j] = distance[j],distance[i]</span><br><span class="line">            labels_xy[i],labels_xy[j] = labels_xy[j],labels_xy[i]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;排序后的距离为: &quot;</span>,distance)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对应的标签的位置为: &quot;</span>,labels_xy)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;取距离最近的3个值:&quot;</span>,distance[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#进行投票表决</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===============================表决投票================================&quot;</span>)</span><br><span class="line">A = <span class="number">0</span></span><br><span class="line">B = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">if</span> labels[labels_xy[i]] == <span class="string">&quot;A&quot;</span>:</span><br><span class="line">        A+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        B+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;投票为A的数量为:&quot;</span>,A)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;投票为B的数量为:&quot;</span>,B)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对照初始图中红色点(测试点)与前两个标签为A的离的最近,所以我们的计算与图中所呈现的结果一致!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="本次作业实现"><a href="#本次作业实现" class="headerlink" title="本次作业实现"></a>本次作业实现</h3><h4 id="knn1"><a href="#knn1" class="headerlink" title="knn1"></a>knn1</h4><p>  本次作业是要求填写出所空的代码，并且能够对代码理解，下面有我的运行结果，由于我还不会在博客上上传图片，所以显示不成图片信息，还有就是<strong>uniform</strong>这个函数我在pycharm上无法运行，所以我把<strong>uniform</strong>换成了random.uniform,这样填好代码就可以运行了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#将代码中缺失部分_ _ _ _ _补充完整，成功运行代码将样本点test_data分类（AorB）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### 初始化数据集 #####</span></span><br><span class="line">m = <span class="number">60</span> <span class="comment">#数据个数</span></span><br><span class="line">data_A = [[],[]]<span class="comment">#数据集 A</span></span><br><span class="line">data_B = [[],[]]<span class="comment">#数据集 B</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">if</span> i &lt; m/<span class="number">2</span>: </span><br><span class="line">        data_A[<span class="number">0</span>].append(random.uniform(<span class="number">1</span>,<span class="number">5</span>))<span class="comment">#随机设定</span></span><br><span class="line">        data_A[<span class="number">1</span>].append(random.uniform(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">    <span class="keyword">elif</span> i &lt; m:</span><br><span class="line">        data_B[<span class="number">0</span>].append(random.uniform(<span class="number">6</span>,<span class="number">10</span>))</span><br><span class="line">        data_B[<span class="number">1</span>].append(random.uniform(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">test_data = [[<span class="number">4.5</span>],[<span class="number">4.5</span>]]<span class="comment">#测试集</span></span><br><span class="line">len_A = <span class="built_in">len</span>(data_A[<span class="number">0</span>])</span><br><span class="line">len_B = <span class="built_in">len</span>(data_B[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 计算距离并排序 #####</span></span><br><span class="line">distance_A = []<span class="comment">#与 A 类数据之间的距离</span></span><br><span class="line">distance_B = []<span class="comment">#与 B 类数据之间的距离</span></span><br><span class="line">distance = []<span class="comment">#全部距离</span></span><br><span class="line"><span class="comment">#计算距离（使用欧氏距离）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_A):</span><br><span class="line">    d = sqrt((test_data[<span class="number">0</span>][<span class="number">0</span>]-data_A[<span class="number">0</span>][i])**<span class="number">2</span>+(test_data[<span class="number">1</span>][<span class="number">0</span>]-data_A[<span class="number">1</span>][i])**<span class="number">2</span>)</span><br><span class="line">    distance_A.append(d)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_B):</span><br><span class="line">    d = sqrt((test_data[<span class="number">0</span>][<span class="number">0</span>] - data_B[<span class="number">0</span>][i]) ** <span class="number">2</span> + (test_data[<span class="number">1</span>][<span class="number">0</span>] -data_B[<span class="number">1</span>][i]) ** <span class="number">2</span>)</span><br><span class="line">    distance_B.append(d)</span><br><span class="line"><span class="comment">#由小到大排序（此处使用冒泡排序）</span></span><br><span class="line">distance = distance_A + distance_B</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(distance)-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(distance)-i-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> distance[j] &gt; distance[j+<span class="number">1</span>]:</span><br><span class="line">            distance[j],distance[j+<span class="number">1</span>]=distance[j+<span class="number">1</span>],distance[j]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;距离所有A类数据的距离为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(distance_A)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;距离所有B类数据的距离为：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(distance_B)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对所有的距离升序排序：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(distance)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 按 K 最近领对测试集进行分类 #####</span></span><br><span class="line">K = <span class="number">5</span></span><br><span class="line">number_A = <span class="number">0</span></span><br><span class="line">number_B = <span class="number">0</span></span><br><span class="line"><span class="comment">#定义删除函数，避免对同一个数据重复计算</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">a,b,ls</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b):</span><br><span class="line">        <span class="keyword">if</span> ls[i]==a:</span><br><span class="line">            ls.pop(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment">#找出与测试数据最接近的 K 个点</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(K):</span><br><span class="line">    <span class="keyword">if</span> distance[i] <span class="keyword">in</span> distance_A:</span><br><span class="line">        number_A += <span class="number">1</span></span><br><span class="line">        delete(distance[i],<span class="built_in">len</span>(distance_A),distance_A)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> distance[i] <span class="keyword">in</span> distance_B:</span><br><span class="line">        number_B += <span class="number">1</span></span><br><span class="line">        delete(distance[i],<span class="built_in">len</span>(distance_B),distance_B)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最终结果：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;距离待测数据最近的K=&#123;:&#125;个数据中，A类数据有&#123;:&#125;个，B类数据有&#123;:&#125;个&quot;</span>.<span class="built_in">format</span>(K,number_A,number_B))</span><br><span class="line"><span class="keyword">if</span> number_A &gt; number_B:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;所以K=&#123;:&#125;时，待测数据划分为A类&quot;</span>.<span class="built_in">format</span>(K))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;所以K=&#123;:&#125;时，待测数据划分为B类&quot;</span>.<span class="built_in">format</span>(K))</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 画图 #####</span></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_A):<span class="comment">#A 类，用红色三角形表示</span></span><br><span class="line">    <span class="keyword">if</span> i!=len_A-<span class="number">1</span>:</span><br><span class="line">        plt.plot(data_A[<span class="number">0</span>][i],data_A[<span class="number">1</span>][i],<span class="string">&#x27;bo&#x27;</span>,marker=<span class="string">&#x27;^&#x27;</span>,color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plt.plot(data_A[<span class="number">0</span>][i],data_A[<span class="number">1</span>][i],<span class="string">&#x27;bo&#x27;</span>,marker=<span class="string">&#x27;^&#x27;</span>,label=<span class="string">&#x27;A&#x27;</span>,color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="comment">#使用 if..else... 是为了避免在图形中重复出现多个标签</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_B):<span class="comment">#B 类，用蓝色正方形表示</span></span><br><span class="line">    <span class="keyword">if</span> i!=len_B-<span class="number">1</span>:</span><br><span class="line">        plt.plot(data_B[<span class="number">0</span>][i],data_B[<span class="number">1</span>][i],<span class="string">&#x27;bo&#x27;</span>,marker=<span class="string">&#x27;s&#x27;</span>,color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plt.plot(data_B[<span class="number">0</span>][i],data_B[<span class="number">1</span>][i],<span class="string">&#x27;bo&#x27;</span>,marker=<span class="string">&#x27;s&#x27;</span>,label=<span class="string">&#x27;B&#x27;</span>,color=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">plt.plot(test_data[<span class="number">0</span>][<span class="number">0</span>],test_data[<span class="number">1</span>][<span class="number">0</span>],<span class="string">&#x27;bo&#x27;</span>,label=<span class="string">&#x27;待测数据&#x27;</span>,color=<span class="string">&#x27;g&#x27;</span>)<span class="comment">#测试集</span></span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>代码运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">距离所有A类数据的距离为：</span><br><span class="line">[<span class="number">0.5730634008409403</span>, <span class="number">3.374734638082625</span>, <span class="number">4.85238240997041</span>, <span class="number">1.1386161987769003</span>, <span class="number">1.3317711401556285</span>, <span class="number">3.313578111859537</span>, <span class="number">1.3580830822988061</span>, <span class="number">1.0734562239393441</span>, <span class="number">2.008003589617018</span>, <span class="number">2.0908790315605903</span>, <span class="number">2.7563597649309943</span>, <span class="number">3.1933943316208713</span>, <span class="number">2.6192587763046205</span>, <span class="number">3.702570545599137</span>, <span class="number">1.1421411050405643</span>, <span class="number">2.4799057257365527</span>, <span class="number">2.235880491670782</span>, <span class="number">3.593447123627203</span>, <span class="number">2.9883415325535485</span>, <span class="number">0.7183532882000413</span>, <span class="number">3.233504674274472</span>, <span class="number">2.8400107982328113</span>, <span class="number">1.554444319906202</span>, <span class="number">1.5442328971482595</span>, <span class="number">2.3862341428178944</span>, <span class="number">2.8407374819139375</span>, <span class="number">1.5886655333251416</span>, <span class="number">3.686640883839242</span>, <span class="number">2.56964609320574</span>, <span class="number">2.1995320416821915</span>]</span><br><span class="line">距离所有B类数据的距离为：</span><br><span class="line">[<span class="number">5.462302561243948</span>, <span class="number">3.189998295980043</span>, <span class="number">5.66016413616719</span>, <span class="number">2.873928268889639</span>, <span class="number">2.3588178825180557</span>, <span class="number">2.845114087378123</span>, <span class="number">6.249833647339466</span>, <span class="number">3.6667688503752824</span>, <span class="number">5.403234449841704</span>, <span class="number">5.3961820751599445</span>, <span class="number">5.519290431682128</span>, <span class="number">4.016026264463092</span>, <span class="number">4.0860089015555605</span>, <span class="number">5.027424253197781</span>, <span class="number">2.2831780876191945</span>, <span class="number">3.95232218924902</span>, <span class="number">3.1903419671827993</span>, <span class="number">5.4025201378493355</span>, <span class="number">3.5581570467940487</span>, <span class="number">4.793138584901225</span>, <span class="number">4.568908221063331</span>, <span class="number">5.173404779952996</span>, <span class="number">5.87769926986507</span>, <span class="number">2.3360721703587806</span>, <span class="number">1.9668120277152399</span>, <span class="number">5.160946046477953</span>, <span class="number">3.1221574869993782</span>, <span class="number">4.007579734814456</span>, <span class="number">3.689644116446279</span>, <span class="number">2.9587240140651914</span>]</span><br><span class="line"></span><br><span class="line">对所有的距离升序排序：</span><br><span class="line">[<span class="number">0.5730634008409403</span>, <span class="number">0.7183532882000413</span>, <span class="number">1.0734562239393441</span>, <span class="number">1.1386161987769003</span>, <span class="number">1.1421411050405643</span>, <span class="number">1.3317711401556285</span>, <span class="number">1.3580830822988061</span>, <span class="number">1.5442328971482595</span>, <span class="number">1.554444319906202</span>, <span class="number">1.5886655333251416</span>, <span class="number">1.9668120277152399</span>, <span class="number">2.008003589617018</span>, <span class="number">2.0908790315605903</span>, <span class="number">2.1995320416821915</span>, <span class="number">2.235880491670782</span>, <span class="number">2.2831780876191945</span>, <span class="number">2.3360721703587806</span>, <span class="number">2.3588178825180557</span>, <span class="number">2.3862341428178944</span>, <span class="number">2.4799057257365527</span>, <span class="number">2.56964609320574</span>, <span class="number">2.6192587763046205</span>, <span class="number">2.7563597649309943</span>, <span class="number">2.8400107982328113</span>, <span class="number">2.8407374819139375</span>, <span class="number">2.845114087378123</span>, <span class="number">2.873928268889639</span>, <span class="number">2.9587240140651914</span>, <span class="number">2.9883415325535485</span>, <span class="number">3.1221574869993782</span>, <span class="number">3.189998295980043</span>, <span class="number">3.1903419671827993</span>, <span class="number">3.1933943316208713</span>, <span class="number">3.233504674274472</span>, <span class="number">3.313578111859537</span>, <span class="number">3.374734638082625</span>, <span class="number">3.5581570467940487</span>, <span class="number">3.593447123627203</span>, <span class="number">3.6667688503752824</span>, <span class="number">3.686640883839242</span>, <span class="number">3.689644116446279</span>, <span class="number">3.702570545599137</span>, <span class="number">3.95232218924902</span>, <span class="number">4.007579734814456</span>, <span class="number">4.016026264463092</span>, <span class="number">4.0860089015555605</span>, <span class="number">4.568908221063331</span>, <span class="number">4.793138584901225</span>, <span class="number">4.85238240997041</span>, <span class="number">5.027424253197781</span>, <span class="number">5.160946046477953</span>, <span class="number">5.173404779952996</span>, <span class="number">5.3961820751599445</span>, <span class="number">5.4025201378493355</span>, <span class="number">5.403234449841704</span>, <span class="number">5.462302561243948</span>, <span class="number">5.519290431682128</span>, <span class="number">5.66016413616719</span>, <span class="number">5.87769926986507</span>, <span class="number">6.249833647339466</span>]</span><br><span class="line"></span><br><span class="line">最终结果：</span><br><span class="line">距离待测数据最近的K=<span class="number">5</span>个数据中，A类数据有<span class="number">5</span>个，B类数据有<span class="number">0</span>个</span><br><span class="line">所以K=<span class="number">5</span>时，待测数据划分为A类</span><br></pre></td></tr></table></figure>

<p>分析：其实我们光看数据随机生成的范围就可以看出，因为测试数据是的大小是在A旁边的，所以距离测试数据的K个最近值肯定大部分都在A区了，所以说待测数据划分成了A类，但是为了避免这样，我们可以在A与B之间来初始化测试数据的。</p>
<h4 id="knn2"><a href="#knn2" class="headerlink" title="knn2"></a>knn2</h4><p>这个作业也是对代码进行补充的，下面是代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment">#将代码中缺失部分_ _ _ _ _ _补充完整，成功运行代码将样本电影分类</span></span><br><span class="line">movie_data = &#123;<span class="string">&quot;宝贝当家&quot;</span>: [<span class="number">45</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="string">&quot;喜剧片&quot;</span>],</span><br><span class="line">              <span class="string">&quot;美人鱼&quot;</span>: [<span class="number">21</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="string">&quot;喜剧片&quot;</span>],</span><br><span class="line">              <span class="string">&quot;澳门风云3&quot;</span>: [<span class="number">54</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="string">&quot;喜剧片&quot;</span>],</span><br><span class="line">              <span class="string">&quot;功夫熊猫3&quot;</span>: [<span class="number">39</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="string">&quot;喜剧片&quot;</span>],</span><br><span class="line">              <span class="string">&quot;谍影重重&quot;</span>: [<span class="number">5</span>, <span class="number">2</span>, <span class="number">57</span>, <span class="string">&quot;动作片&quot;</span>],</span><br><span class="line">              <span class="string">&quot;叶问3&quot;</span>: [<span class="number">3</span>, <span class="number">2</span>, <span class="number">65</span>, <span class="string">&quot;动作片&quot;</span>],</span><br><span class="line">              <span class="string">&quot;伦敦陷落&quot;</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">55</span>, <span class="string">&quot;动作片&quot;</span>],</span><br><span class="line">              <span class="string">&quot;我的特工爷爷&quot;</span>: [<span class="number">6</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="string">&quot;动作片&quot;</span>],</span><br><span class="line">              <span class="string">&quot;奔爱&quot;</span>: [<span class="number">7</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="string">&quot;爱情片&quot;</span>],</span><br><span class="line">              <span class="string">&quot;夜孔雀&quot;</span>: [<span class="number">9</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="string">&quot;爱情片&quot;</span>],</span><br><span class="line">              <span class="string">&quot;代理情人&quot;</span>: [<span class="number">9</span>, <span class="number">38</span>, <span class="number">2</span>, <span class="string">&quot;爱情片&quot;</span>],</span><br><span class="line">              <span class="string">&quot;新步步惊心&quot;</span>: [<span class="number">8</span>, <span class="number">34</span>, <span class="number">17</span>, <span class="string">&quot;爱情片&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试样本  唐人街探案&quot;: [23, 3, 17, &quot;？片&quot;]</span></span><br><span class="line"><span class="comment">#下面为求与数据集中所有数据的距离代码：</span></span><br><span class="line">x = [<span class="number">23</span>, <span class="number">3</span>, <span class="number">17</span>]</span><br><span class="line">KNN = []</span><br><span class="line"><span class="comment">#计算样本与数据间距离（欧氏距离）</span></span><br><span class="line"><span class="comment">#下面循环说明，例，第一次循环时key=“宝贝当家”；v=[45, 2, 9, &quot;喜剧片&quot;]，v为列表</span></span><br><span class="line"><span class="comment">#a**2即为a的2次方</span></span><br><span class="line"><span class="keyword">for</span> key, v <span class="keyword">in</span> movie_data.items():</span><br><span class="line">    d = math.sqrt((x[<span class="number">0</span>] - v[<span class="number">0</span>]) ** <span class="number">2</span> + (x[<span class="number">1</span>] - v[<span class="number">1</span>]) ** <span class="number">2</span> + (x[<span class="number">2</span>] - v[<span class="number">2</span>]) ** <span class="number">2</span>)</span><br><span class="line">    KNN.append([key, <span class="built_in">round</span>(d, <span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出所用电影到 唐人街探案的距离</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;所有样本到唐人街探案的距离：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(KNN)</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照距离大小进行递增排序</span></span><br><span class="line">KNN.sort(key=<span class="keyword">lambda</span> dis: dis[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#选取距离最小的k个样本，这里取k=5；</span></span><br><span class="line">KNN=KNN[:<span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;距离最近的五个样本：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(KNN)</span><br><span class="line"></span><br><span class="line"><span class="comment">#确定前k个样本所在类别出现的频率，并输出出现频率最高的类别</span></span><br><span class="line">labels = &#123;<span class="string">&quot;喜剧片&quot;</span>:<span class="number">0</span>,<span class="string">&quot;动作片&quot;</span>:<span class="number">0</span>,<span class="string">&quot;爱情片&quot;</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> KNN:</span><br><span class="line">    label = movie_data[s[<span class="number">0</span>]]</span><br><span class="line">    labels[label[<span class="number">3</span>]] += <span class="number">1</span></span><br><span class="line">labels =<span class="built_in">sorted</span>(labels.items(),key=<span class="keyword">lambda</span> l: l[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;《唐人街探案》属于&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(labels[<span class="number">0</span>][<span class="number">0</span>],sep=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">所有样本到唐人街探案的距离：</span><br><span class="line">[[<span class="string">&#x27;宝贝当家&#x27;</span>, <span class="number">23.43</span>], [<span class="string">&#x27;美人鱼&#x27;</span>, <span class="number">18.55</span>], [<span class="string">&#x27;澳门风云3&#x27;</span>, <span class="number">32.14</span>], [<span class="string">&#x27;功夫熊猫3&#x27;</span>, <span class="number">21.47</span>], [<span class="string">&#x27;谍影重重&#x27;</span>, <span class="number">43.87</span>], [<span class="string">&#x27;叶问3&#x27;</span>, <span class="number">52.01</span>], [<span class="string">&#x27;伦敦陷落&#x27;</span>, <span class="number">43.42</span>], [<span class="string">&#x27;我的特工爷爷&#x27;</span>, <span class="number">17.49</span>], [<span class="string">&#x27;奔爱&#x27;</span>, <span class="number">47.69</span>], [<span class="string">&#x27;夜孔雀&#x27;</span>, <span class="number">39.66</span>], [<span class="string">&#x27;代理情人&#x27;</span>, <span class="number">40.57</span>], [<span class="string">&#x27;新步步惊心&#x27;</span>, <span class="number">34.44</span>]]</span><br><span class="line">距离最近的五个样本：</span><br><span class="line">[[<span class="string">&#x27;我的特工爷爷&#x27;</span>, <span class="number">17.49</span>], [<span class="string">&#x27;美人鱼&#x27;</span>, <span class="number">18.55</span>], [<span class="string">&#x27;功夫熊猫3&#x27;</span>, <span class="number">21.47</span>], [<span class="string">&#x27;宝贝当家&#x27;</span>, <span class="number">23.43</span>], [<span class="string">&#x27;澳门风云3&#x27;</span>, <span class="number">32.14</span>]]</span><br><span class="line">[(<span class="string">&#x27;喜剧片&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;动作片&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;爱情片&#x27;</span>, <span class="number">0</span>)]</span><br><span class="line">《唐人街探案》属于</span><br><span class="line">喜剧片</span><br></pre></td></tr></table></figure>

<p>理论参考链接：<a href="https://stoic-shaw-839c64.netlify.app/ai/knn/">https://stoic-shaw-839c64.netlify.app/ai/knn/</a></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2022/01/24/%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<p> C++继承</p>
<span id="more"></span>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h3 id="继承的基本语法"><a href="#继承的基本语法" class="headerlink" title="继承的基本语法"></a>继承的基本语法</h3><hr>
<p>class 派生类：public 基类</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//继承，可以减少许多重复的代码 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;首页，公开课，登录，注册...(公共头部)&quot;</span>&lt;&lt;endl; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">&quot;帮助中心，交流合作，站内地图...(公共低部)&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Java,Python,C++/C...(公共左部)&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span>:</span><span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;python学科视频&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++/C页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;C++/C学科视频&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span>:</span><span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Java学科视频&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Python python;</span><br><span class="line">	python.<span class="built_in">header</span>();</span><br><span class="line">	python.<span class="built_in">footer</span>();</span><br><span class="line">	python.<span class="built_in">left</span>();</span><br><span class="line">	python.<span class="built_in">content</span>();</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;-----------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">	C c;</span><br><span class="line">	c.<span class="built_in">header</span>();</span><br><span class="line">	c.<span class="built_in">footer</span>();</span><br><span class="line">	c.<span class="built_in">left</span>();</span><br><span class="line">	c.<span class="built_in">content</span>();</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;-----------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">	Java ja;</span><br><span class="line">	ja.<span class="built_in">header</span>();</span><br><span class="line">	ja.<span class="built_in">footer</span>();</span><br><span class="line">	ja.<span class="built_in">left</span>();</span><br><span class="line">	ja.<span class="built_in">content</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>(); </span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h3><hr>
<p>三种继承方式：公共继承，保护继承，私有继承 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//继承方式</span></span><br><span class="line"><span class="comment">//公共继承，保护继承，私有继承 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span>:</span><span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A=<span class="number">100</span>;<span class="comment">//可以访问，m_A到子类中还是public </span></span><br><span class="line">		m_B=<span class="number">120</span>;<span class="comment">//可以访问，m_B到子类中还是protected</span></span><br><span class="line">		<span class="comment">//m_C=130;//不能访问 </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son1 son;</span><br><span class="line">	son.m_A=<span class="number">200</span>;</span><br><span class="line">	<span class="comment">//son.m_B//不能访问，因为到子类中位protected,类外不能访问 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.保护继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>:</span><span class="keyword">protected</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//子类可以访问public和protected </span></span><br><span class="line">		m_A=<span class="number">10</span>;<span class="comment">//但是m_A在子类中变为protected权限 </span></span><br><span class="line">		m_B=<span class="number">20</span>;<span class="comment">//m_A在子类中还是为protected权限 </span></span><br><span class="line">	&#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tese2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son2 son;</span><br><span class="line">	<span class="comment">//son.m_A//保护权限类外不能访问 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.私有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>:</span><span class="keyword">private</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;<span class="comment">//私有继承可以访问基类的public和protected </span></span><br><span class="line">		m_A=<span class="number">12</span>;<span class="comment">//在子类中，m_A位private </span></span><br><span class="line">		m_B=<span class="number">13</span>;<span class="comment">//在子类中，m_A位private </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test1</span>();</span><br><span class="line">	<span class="comment">//test2();</span></span><br><span class="line">	<span class="comment">//test3(); </span></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承中的对象模型"><a href="#继承中的对象模型" class="headerlink" title="继承中的对象模型"></a>继承中的对象模型</h3><hr>
<p>基类中所有非静态成员属性都会被子类继承下去<br>基类中私有成员属性是被编译器给隐藏了，因此是访问不到的 ，但是基类中的被派生类所继承</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//基类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//基类中所有非静态成员属性都会被子类继承下去</span></span><br><span class="line">	<span class="comment">//父类中私有成员属性是被编译器给隐藏了，因此是访问不到的 ，但是被继承了</span></span><br><span class="line">	 cout&lt;&lt;<span class="string">&quot;size of Son=&quot;</span>&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(Son)&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="继承中的同名成员处理"><a href="#继承中的同名成员处理" class="headerlink" title="继承中的同名成员处理"></a>继承中的同名成员处理</h3><hr>
<h5 id="继承中同名属性处理"><a href="#继承中同名属性处理" class="headerlink" title="继承中同名属性处理"></a>继承中同名属性处理</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名属性处理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A=<span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A=<span class="number">200</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;s.m_A= &quot;</span>&lt;&lt;s.m_A&lt;&lt;endl;<span class="comment">//通过子类直接访问的是子类中的</span></span><br><span class="line">	<span class="comment">//可以通过在是s.Base::m_A访问父类中的</span></span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;s.Base::m_A= &quot;</span>&lt;&lt;s.Base::m_A&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>(); </span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h5 id="继承中同名函数处理"><a href="#继承中同名函数处理" class="headerlink" title="继承中同名函数处理"></a>继承中同名函数处理</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名函数处理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Base函数调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//func函数重载</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Base函数(int a)调用&quot;</span>&lt;&lt;endl;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	   cout&lt;&lt;<span class="string">&quot;Son函数调用&quot;</span>&lt;&lt;endl;		</span><br><span class="line">	&#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line">	s.<span class="built_in">func</span>(); <span class="comment">//直接访问访问的是子类的</span></span><br><span class="line">	s.Base::<span class="built_in">func</span>();<span class="comment">//访问父类 </span></span><br><span class="line">	s.Base::<span class="built_in">func</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>(); </span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>总结：</p>
<p>1.子类对象可以直接访问到子类中同名成员</p>
<p>2.子类对象加作用域可以访问到父类同名成员</p>
<p>3.当子类与父类拥有同名的成员函数，子类中隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</p>
<h3 id="同名静态成员处理"><a href="#同名静态成员处理" class="headerlink" title="同名静态成员处理"></a>同名静态成员处理</h3><hr>
<h5 id="继承同名成员静态成员属性处理"><a href="#继承同名成员静态成员属性处理" class="headerlink" title="继承同名成员静态成员属性处理"></a>继承同名成员静态成员属性处理</h5><p>静态成员属性：类外初始化，可以通过对象和类名来访问</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//继承同名成员静态成员属性处理 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外初始化 </span></span><br><span class="line"><span class="keyword">int</span> Base::m_A=<span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外初始化 </span></span><br><span class="line"><span class="keyword">int</span> Son::m_A=<span class="number">300</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//1.通过对象访问 </span></span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;通过对象进行访问&quot;</span>&lt;&lt;endl;</span><br><span class="line">	Son s;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Son 下 m_A= &quot;</span>&lt;&lt;s.m_A&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Base 下 m_A= &quot;</span>&lt;&lt;s.Base::m_A&lt;&lt;endl;</span><br><span class="line">	<span class="comment">//2.通过类名访问</span></span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;通过类名访问&quot;</span>&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Son 下 m_A= &quot;</span>&lt;&lt;Son::m_A&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Base 下 m_A= &quot;</span>&lt;&lt;Son::Base::m_A&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>(); </span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h5 id="继承同名静态成员函数处理"><a href="#继承同名静态成员函数处理" class="headerlink" title="继承同名静态成员函数处理"></a>继承同名静态成员函数处理</h5><p>与同名静态成员属性一样，有两中访问方式，对象和类名</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//继承同名成员静态成员属性处理 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Base static void func&quot;</span>&lt;&lt;endl; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Son static void func&quot;</span>&lt;&lt;endl; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//1.通过对象访问 </span></span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;通过对象进行访问&quot;</span>&lt;&lt;endl;</span><br><span class="line">	Son s;</span><br><span class="line">	s.<span class="built_in">func</span>();</span><br><span class="line">	s.Base::<span class="built_in">func</span>();</span><br><span class="line">	<span class="comment">//2.通过类名访问</span></span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;通过类名访问&quot;</span>&lt;&lt;endl;</span><br><span class="line">	Son::<span class="built_in">func</span>();</span><br><span class="line">	Son::Base::<span class="built_in">func</span>(); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>(); </span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="多继承语法"><a href="#多继承语法" class="headerlink" title="多继承语法"></a>多继承语法</h3><p>class 类名：public 类名，public 类名(或者其他类型的继承)</p>
<p>{}</p>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//多继承语法 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base1</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A=<span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base2</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		m_B=<span class="number">200</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span><span class="keyword">public</span> Base1,<span class="keyword">public</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Son</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		m_C=<span class="number">123</span>;</span><br><span class="line">		m_D=<span class="number">124</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">	<span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//测试函数样例 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;sizeof(s)= &quot;</span>&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(s)&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;m_A= &quot;</span>&lt;&lt;s.m_A&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h3><hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//菱形继承 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Anmial</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Anmial&#123;&#125;;<span class="comment">//将其变为虚继承,这样最后得到的数据就会只有一份</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuo</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Anmial&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SheepTuo</span>:</span><span class="keyword">public</span> Sheep,<span class="keyword">public</span> Tuo</span><br><span class="line">&#123;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SheepTuo st;</span><br><span class="line">	st.Sheep::m_Age=<span class="number">18</span>;</span><br><span class="line">	st.Tuo::m_Age=<span class="number">28</span>;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;st.Sheep::m_Age= &quot;</span>&lt;&lt;st.Sheep::m_Age&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;st.Tuo::m_Age= &quot;</span>&lt;&lt;st.Tuo::m_Age&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;st.m_Age= &quot;</span>&lt;&lt;st.m_Age&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++运算符重载</title>
    <url>/2022/01/22/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<p>重载</p>
<span id="more"></span>

<h2 id="C-运算符重载"><a href="#C-运算符重载" class="headerlink" title="C++运算符重载"></a>C++运算符重载</h2><h3 id="加号重载"><a href="#加号重载" class="headerlink" title="加号重载"></a>加号重载</h3><hr>
<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//加号运算符重载 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//成员函数重载+ </span></span><br><span class="line"><span class="comment">//	Person operator+(Person &amp;p)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		Person temp;</span></span><br><span class="line"><span class="comment">//		temp.m_A=this-&gt;m_A+p.m_A;</span></span><br><span class="line"><span class="comment">//		temp.m_B=this-&gt;m_B+p.m_B;</span></span><br><span class="line"><span class="comment">//		return temp;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数重载</span></span><br><span class="line">Person <span class="keyword">operator</span>+(Person &amp;p1,Person &amp;p2)</span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A=p1.m_A+p2.m_A;</span><br><span class="line">	temp.m_B=p1.m_B+p2.m_B;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试函数 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p1,p2;</span><br><span class="line">	p1.m_A=<span class="number">10</span>;</span><br><span class="line">	p1.m_B=<span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	p2.m_A=<span class="number">20</span>;</span><br><span class="line">	p2.m_B=<span class="number">30</span>;</span><br><span class="line">	<span class="comment">//成员函数本质调用 </span></span><br><span class="line">	<span class="comment">//Person p3=p1.operator+(p2);</span></span><br><span class="line">	Person p3=p1+p2;<span class="comment">//简便写法 </span></span><br><span class="line">	<span class="comment">//全局函数本质调用</span></span><br><span class="line">	<span class="comment">//Person p3=operator+(p1,p2); </span></span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p3.m_A= &quot;</span>&lt;&lt;p3.m_A&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p3.m_B= &quot;</span>&lt;&lt;p3.m_B&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="左移运算符重载"><a href="#左移运算符重载" class="headerlink" title="左移运算符重载"></a>左移运算符重载</h3><p>只能用全局函数重载，不能用成员函数重载</p>
<hr>
<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//加号运算符重载 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;cout,Person &amp;p);<span class="comment">//全局函数做友元 </span></span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		m_A=a;</span><br><span class="line">		m_B=b;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数重载</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;cout,Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p.m_A= &quot;</span>&lt;&lt;p.m_A&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p.m_B= &quot;</span>&lt;&lt;p.m_B&lt;&lt;endl;	</span><br><span class="line">	<span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">	cout&lt;&lt;p&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="递增运算符重载"><a href="#递增运算符重载" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h3><hr>
<p>完整代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//自定义类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//为了能够访问私有权限，要进行全局函数友元化</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;cout,MyInteger &amp;p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">MyInteger</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		m_num=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//前置递增++i,返回引用是为了一直对一个数据进行操作 </span></span><br><span class="line">	MyInteger&amp;  <span class="keyword">operator</span>++()</span><br><span class="line">	&#123;</span><br><span class="line">		++m_num;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//后置递增i++</span></span><br><span class="line">	MyInteger <span class="keyword">operator</span>++(<span class="keyword">int</span>)<span class="comment">//int代表一个站位参数，可以用于区分前置和后置 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//先 记录当时结果 </span></span><br><span class="line">		MyInteger temp=*<span class="keyword">this</span>;</span><br><span class="line">		<span class="comment">//后递增 </span></span><br><span class="line">		m_num++;</span><br><span class="line">		<span class="comment">//再返回 值 </span></span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了能输出，要用到 左移运算符重载</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;cout,MyInteger &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p.m_num= &quot;</span>&lt;&lt;p.m_num&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> cout;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//前置递增测试函数 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MyInteger Myint;</span><br><span class="line">	cout&lt;&lt;++(++Myint)&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;Myint&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后置递增测试函数 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MyInteger Myints;</span><br><span class="line">	cout&lt;&lt; Myints++ &lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;Myints&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="递减运算符重载"><a href="#递减运算符重载" class="headerlink" title="递减运算符重载"></a>递减运算符重载</h3><hr>
<p>完整代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//递减运算符重载</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;cout,MyInteger &amp;p);<span class="comment">//全局函数友元化 </span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">MyInteger</span>()<span class="comment">//初始化值 </span></span><br><span class="line">	&#123;</span><br><span class="line">		m_num=<span class="number">5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//前置递增--i,返回引用是为了一直对一个数据进行操作 </span></span><br><span class="line">	MyInteger&amp;  <span class="keyword">operator</span>--()</span><br><span class="line">	&#123;</span><br><span class="line">		--m_num;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_num;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//左移运算符重载</span></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;cout,MyInteger &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p.m_num=: &quot;</span>&lt;&lt;p.m_num&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> cout;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MyInteger cnt;</span><br><span class="line">	cout&lt;&lt;--(--cnt)&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h3><hr>
<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//赋值运算符重载 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		m_Age=<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(age); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//赋值运算符重载</span></span><br><span class="line">	Person&amp; <span class="keyword">operator</span>==(Person &amp;p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(m_Age!=<span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Age;</span><br><span class="line">			m_Age=<span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//深拷贝 </span></span><br><span class="line">		m_Age=<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(*p.m_Age);</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;<span class="comment">//返回自身 </span></span><br><span class="line">	&#125; </span><br><span class="line">	~<span class="built_in">Person</span>()<span class="comment">//析构函数用于人为释放 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(m_Age!=<span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Age;</span><br><span class="line">		    m_Age=<span class="literal">NULL</span>; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> *m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">1</span>)</span>,<span class="title">p3</span><span class="params">(<span class="number">12</span>)</span></span>;</span><br><span class="line">	p3=p2=p1;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p1.m_Age=: &quot;</span>&lt;&lt;*p1.m_Age&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p2.m_Age=: &quot;</span>&lt;&lt;*p2.m_Age&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p2.m_Age=: &quot;</span>&lt;&lt;*p2.m_Age&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="关系运算符重载"><a href="#关系运算符重载" class="headerlink" title="关系运算符重载"></a>关系运算符重载</h3><p>可以用来判断自定义的两个类型是否相等关系包括相等(==)和不相等(!=)</p>
<hr>
<h4 id="1-关系运算符相等重载"><a href="#1-关系运算符相等重载" class="headerlink" title="1.关系运算符相等重载"></a>1.关系运算符相等重载</h4><p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//关系运算符重载 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name,<span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		m_Name=name;</span><br><span class="line">		m_Age=age;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//重载==</span></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(Person &amp;p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_Name==p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age==p.m_Age)</span><br><span class="line">		 <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		 <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	 &#125; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_Name;</span><br><span class="line">	<span class="keyword">int</span> m_Age;	</span><br><span class="line">	</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Tom&quot;</span>,<span class="number">18</span>)</span>,<span class="title">p2</span><span class="params">(<span class="string">&quot;Marry&quot;</span>,<span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span>(p1==p2)</span><br><span class="line">	 cout&lt;&lt;<span class="string">&quot;p1和p2相等&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	 cout&lt;&lt;<span class="string">&quot;p1和p2不相等&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-关系运算符不相等重载"><a href="#2-关系运算符不相等重载" class="headerlink" title="2.关系运算符不相等重载"></a>2.关系运算符不相等重载</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name,<span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		m_Name=name;</span><br><span class="line">		m_Age=age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//重载！=</span></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>!=(Person &amp;p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_Name!=p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age!=p.m_Age)</span><br><span class="line">		 <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		 <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;gyh&quot;</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;wjh&quot;</span>,<span class="number">19</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span>(p1!=p2)</span><br><span class="line">	 cout&lt;&lt;<span class="string">&quot;p1和p2不相等&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	 cout&lt;&lt;<span class="string">&quot;p1和p2相等&quot;</span>&lt;&lt;endl;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数调用运算符重载"><a href="#函数调用运算符重载" class="headerlink" title="函数调用运算符重载"></a>函数调用运算符重载</h3><p>调用比较灵活，和函数调用非常相似</p>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//函数调用运算符()重载 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Print</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string sss)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout&lt;&lt;sss&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a+b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Print print;</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;我想你了&quot;</span>);</span><br><span class="line">	<span class="comment">//或者</span></span><br><span class="line">	<span class="built_in">Print</span>()(<span class="string">&quot;我想你了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Print add;</span><br><span class="line">	<span class="keyword">int</span> end=<span class="built_in">add</span>(<span class="number">10</span>,<span class="number">13</span>);</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;add= &quot;</span>&lt;&lt;end&lt;&lt;endl;</span><br><span class="line">	<span class="comment">//或者</span></span><br><span class="line">	cout&lt;&lt;<span class="built_in">Print</span>()(<span class="number">10</span>,<span class="number">24</span>)&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test2</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++面向对象编程</tag>
      </tags>
  </entry>
  <entry>
    <title>C++友元</title>
    <url>/2022/01/22/c++%E5%8F%8B%E5%85%83/</url>
    <content><![CDATA[<p>友元</p>
<span id="more"></span>

<h3 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h3><hr>
<h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">goodGay</span><span class="params">(Building *building)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="完整代码举例"><a href="#完整代码举例" class="headerlink" title="完整代码举例"></a>完整代码举例</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//关键代码</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">goodGay</span><span class="params">(Building *building)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Building</span>()</span><br><span class="line">	&#123;</span><br><span class="line">	   	m_SittingRoom=<span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	   	m_BedRoom=<span class="string">&quot;卧室&quot;</span>; </span><br><span class="line">	&#125; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string m_SittingRoom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string m_BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay</span><span class="params">(Building *building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;好基友正在访问&quot;</span>&lt;&lt;building-&gt;m_SittingRoom&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;好基友正在访问&quot;</span>&lt;&lt;building-&gt;m_BedRoom&lt;&lt;endl;</span><br><span class="line">	 </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Building b; </span><br><span class="line">	<span class="built_in">goodGay</span>(&amp;b);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类做友元"><a href="#类做友元" class="headerlink" title="类做友元"></a>类做友元</h3><hr>
<h4 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodGay</span>;</span></span><br></pre></td></tr></table></figure>

<h4 id="完整代码举例-1"><a href="#完整代码举例-1" class="headerlink" title="完整代码举例"></a>完整代码举例</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">GoodGay</span>();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;<span class="comment">//参观函数，访问Building中的属性 </span></span><br><span class="line">	</span><br><span class="line">	Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//加上这个就可以表明是他的好朋友 ,然后就可以访问 </span></span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodGay</span>;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	</span><br><span class="line">    <span class="built_in">Building</span>();</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string m_SittingRoom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string m_BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Building构造函数在类外进行初始化 </span></span><br><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_SittingRoom=<span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_BedRoom=<span class="string">&quot;卧室&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GoodGay构造函数在类外进行初始化 </span></span><br><span class="line">GoodGay::<span class="built_in">GoodGay</span>()</span><br><span class="line">&#123;</span><br><span class="line">	building=<span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在类外进行访问 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;好基友正在访问&quot;</span>&lt;&lt;building-&gt;m_SittingRoom&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;好基友正在访问&quot;</span>&lt;&lt;building-&gt;m_BedRoom&lt;&lt;endl;</span><br><span class="line">	 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GoodGay b;</span><br><span class="line">	b.<span class="built_in">visit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h3><hr>
<h4 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="完整代码举例-2"><a href="#完整代码举例-2" class="headerlink" title="完整代码举例"></a>完整代码举例</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//成员函数做友元 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">GoodGay</span>();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;<span class="comment">//成员函数 可以访问私有 </span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visits</span><span class="params">()</span></span>;<span class="comment">//成员函数  不可以访问私有 </span></span><br><span class="line">	</span><br><span class="line">	Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span>;<span class="comment">//成员函数做友元 </span></span><br><span class="line">	<span class="comment">//friend class GoodGay;//类做友元 </span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Building</span>();</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string m_SittingRoom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string m_BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//初始化Building构造函数 类外实现 </span></span><br><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">	m_SittingRoom=<span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	m_BedRoom=<span class="string">&quot;卧室&quot;</span>;	 </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类外实现构造函数 </span></span><br><span class="line">GoodGay::<span class="built_in">GoodGay</span>()</span><br><span class="line">&#123;</span><br><span class="line">	building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;好基友正在访问: &quot;</span>&lt;&lt;building-&gt;m_SittingRoom&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;好基友正在访问: &quot;</span>&lt;&lt;building-&gt;m_BedRoom&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoodGay::visits</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;好基友正在访问: &quot;</span>&lt;&lt;building-&gt;m_SittingRoom&lt;&lt;endl;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;&quot;好基友正在访问: &quot;&lt;&lt;building-&gt;m_BedRoom&lt;&lt;endl;//这个没有说明，则不可以访问私有 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GoodGay b;</span><br><span class="line">	b.<span class="built_in">visit</span>();</span><br><span class="line">	b.<span class="built_in">visits</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>[^以上为我学习过程中的记录]: </p>
]]></content>
      <tags>
        <tag>C++面向对象编程</tag>
      </tags>
  </entry>
  <entry>
    <title>多元线性回归</title>
    <url>/2022/01/21/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<p>多元线性回归</p>
<span id="more"></span>

<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>​     学习一元线性回归之后，我们便开始学习多元线性回归。</p>
<p>​     我们之前学习的一元线性回归具有单一的特征x，就拿房子的面积与其房子价格的关系来说，在一元线性回归中我们仅有theta0和theta1</p>
<p>假设函数：<br>$$<br>h_θ=θ_0+θ_1k<br>$$<br>​     但是在现实生活中，不可能仅仅依靠房子价格由房子的面积来决定，因为影响房价的因素肯定不仅仅是面积比如，有几个卧室，有几个卫生间，房龄多久了等等。</p>
<p>​     我们也许在生活中见到过房子面积大的比房子面积小的价格更低，说明还有其他因素在影响着价格。那么我们如何更好的来预测房子的价格呢，我们需要把更多的特征纳入假设函数中，这样才能使我们的预测结果更加准确。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="假设函数："><a href="#假设函数：" class="headerlink" title="假设函数："></a>假设函数：</h3><p>$$<br>(θ_0,θ_1,θ_2,θ_3,……θ_n)θ代表一系列需要学习的参数<br>$$</p>
<p>$$<br>(1,X^i_1,X^i_2,X^i_3,……,X^i_n )代表了特征的参数<br>$$</p>
<p>所以多元线性回归的假设函数可以写为：<br>$$<br>h_θ(x)=θ_0+θ_1X^i_1+θ_2X^i_2+θ_3X^i_3+……+θ_nX^i_n<br>$$</p>
<p>$$<br>若令θ_0X^i_0=1<br>$$</p>
<p>$$<br>则h_θ(x)=θ_0X^i_0+θ_1X^i_1+θ_2X^i_2+θ_3X^i_3+……+θ_nX^i_n<br>$$</p>
<h5 id="一元线性回归损失函数"><a href="#一元线性回归损失函数" class="headerlink" title="一元线性回归损失函数"></a>一元线性回归损失函数</h5><p>$$<br>J(θ_0,θ_1)=\frac{1}{2m}\sum ^n_i(y^i-y)^2<br>$$</p>
<h5 id="求导后的公式为"><a href="#求导后的公式为" class="headerlink" title="求导后的公式为"></a>求导后的公式为</h5><p>$$<br>对\theta_0进行求导后的导函数：\frac{\partial}{\theta_0}=\frac{1}{m}\sum ^n_i(y^i-y)<br>$$</p>
<p>$$<br>对\theta_1进行求导后的导函数：\frac{\partial}{\theta_1}=\frac{1}{m}\sum ^n_i(y^i-y)x^i<br>$$</p>
<h5 id="一元迭代函数"><a href="#一元迭代函数" class="headerlink" title="一元迭代函数"></a>一元迭代函数</h5><p>$$<br>对\theta_0进行迭代更新：\theta_0=\alpha\frac{\partial}{\theta_0}=\theta_0-\alpha\frac{1}{m}\sum ^n_i(y^i-y)<br>$$</p>
<p>$$<br>对\theta_1进行迭代更新：\theta_1=\alpha\frac{\partial}{\theta_1}=\theta_1-\alpha\frac{1}{m}\sum ^n_i(y^i-y)x^i<br>$$</p>
<h2 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h2><p>多元线性回归算法描述</p>
<p>(1).初始化权值</p>
<p>(2).对每一个训练样本：</p>
<p>​      计算权值和输入特征向量之间的值作为预测值</p>
<p>​      计算实际值与预测值之间的误差</p>
<p>​      定义一种误差的衡量标准，想办法让误差降到最低</p>
<p>​      用误差指导权值的更新</p>
<p>(3).设置算法停止的终止条件，当达到终止条件时，算法就不再继续运行</p>
<p>由于我们希望尽可能的减小误差，所以我们在这里采用的方法就是<strong>梯度下降法</strong>，那么首先要构造损失函数</p>
<p>多元损失函数<br>$$<br>J(θ_0,θ_1,\theta_2,\theta_3,…,\theta_n)=\frac{1}{2m}\sum ^n_i(y^i-y)^2<br>$$</p>
<p>对于多元的损失函数进行求导，其实是和一元的差不多的</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>例子：X，Y为数据<br>$$<br>X=\begin{bmatrix}<br>1&amp;2&amp;5&amp;4\<br>2&amp;5&amp;1&amp;2\<br>\end{bmatrix}<br>$$</p>
<p>$$<br>Y=\begin{bmatrix}<br>19\<br>26\<br>19\<br>20\<br>\end{bmatrix}<br>$$</p>
<h3 id="批梯度下降："><a href="#批梯度下降：" class="headerlink" title="批梯度下降："></a>批梯度下降：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bgd</span>(<span class="params">samples, y, step_size=<span class="number">0.01</span>, max_iteration_count=<span class="number">10000</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    批梯度下降法Batch Gradient Descent</span></span><br><span class="line"><span class="string">    :param samples: 样本</span></span><br><span class="line"><span class="string">    :param y: 结果</span></span><br><span class="line"><span class="string">    :param step_size: 每一接迭代的步长</span></span><br><span class="line"><span class="string">    :param max_iteration_count: 最大的迭代次数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sample_num, dimension = samples.shape</span><br><span class="line">    <span class="comment">#sample_num=矩阵的行数，dimision=矩阵的列数</span></span><br><span class="line">    w = np.ones((dimension,<span class="number">1</span>), dtype=np.float32)<span class="comment"># numpy.ones（）函数返回给定形状和数据类型的新数组，其中元素的值设置为1</span></span><br><span class="line">    <span class="comment">#w为一个行数为dimension列数为1的矩阵</span></span><br><span class="line">    loss_collection = []<span class="comment">#生成一个数组</span></span><br><span class="line">    loss = <span class="number">1</span></span><br><span class="line">    iteration_count = <span class="number">0</span><span class="comment">#用于记录迭代次数</span></span><br><span class="line">    <span class="comment">#  当loss大于阈值并且迭代次数小于最大迭代次数时进行迭代</span></span><br><span class="line">    <span class="keyword">while</span> loss &gt; <span class="number">0.001</span> <span class="keyword">and</span> iteration_count &lt; max_iteration_count:</span><br><span class="line">        loss = <span class="number">0</span></span><br><span class="line">        gradient = np.zeros((dimension,<span class="number">1</span>), dtype=np.float32)<span class="comment">#dtype用于指定数组的数据类型</span></span><br><span class="line">        <span class="comment">#w为一个行数为dimension列数为1的矩阵</span></span><br><span class="line">        <span class="comment">#  计算（批）梯度</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(sample_num):</span><br><span class="line">            predict_y = np.dot(w.T, samples[i])<span class="comment">#dot是矩阵乘法，得到的是预测值</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(dimension):</span><br><span class="line">                gradient[j] += (predict_y - y[i]) * samples[i][j]</span><br><span class="line">        <span class="comment">#对参数进行求值，就是导数相加的和，用于迭代</span></span><br><span class="line">        <span class="comment">#  更新权重</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(dimension):</span><br><span class="line">            w[j] -= step_size * gradient[j]</span><br><span class="line">        <span class="comment">#  计算当前loss值</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(sample_num):</span><br><span class="line">            predict_y = np.dot(w.T, samples[i])</span><br><span class="line">            loss += np.power((predict_y - y[i]), <span class="number">2</span>)</span><br><span class="line">        <span class="comment">#  将loss存储到链表里，以便后续画图</span></span><br><span class="line">        loss_collection.append(loss)</span><br><span class="line">        iteration_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> w,loss_collection</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    samples = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>],</span><br><span class="line">                        [<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>]]).T<span class="comment">#转置，变成4*2的矩阵</span></span><br><span class="line">    <span class="comment">#print(samples[1])</span></span><br><span class="line">    y = np.array([<span class="number">19</span>,<span class="number">26</span>,<span class="number">19</span>,<span class="number">20</span>]).reshape((<span class="number">4</span>,<span class="number">1</span>))<span class="comment">#得到原有矩阵的转置矩阵</span></span><br><span class="line">    <span class="comment">#print(y)</span></span><br><span class="line">    D,loss=bgd(samples,y)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>,i+<span class="number">1</span>,<span class="string">&quot;个参数的值：&quot;</span>,D[i])</span><br></pre></td></tr></table></figure>

<p>运行的结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第 <span class="number">1</span> 个参数的值： [<span class="number">2.8636856</span>]</span><br><span class="line">第 <span class="number">2</span> 个参数的值： [<span class="number">4.570819</span>]</span><br></pre></td></tr></table></figure>

<h3 id="随机梯度下降"><a href="#随机梯度下降" class="headerlink" title="随机梯度下降:"></a>随机梯度下降:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sgd</span>(<span class="params">samples, y, step_size=<span class="number">0.001</span>, max_iteration_count=<span class="number">10000</span></span>):</span></span><br><span class="line">    <span class="comment"># step_size为步长，max_iteration_count为限制条件次数</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    随机梯度下降法Stochastic Gradient Descent</span></span><br><span class="line"><span class="string">    :param samples: 样本</span></span><br><span class="line"><span class="string">    :param y: 结果</span></span><br><span class="line"><span class="string">    :param step_size: 每一接迭代的步长</span></span><br><span class="line"><span class="string">    :param max_iteration_count: 最大的迭代次数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sample_num, dimension = samples.shape           <span class="comment">#sample_num=4(行数),dimension=2(列数)</span></span><br><span class="line">    w = np.ones((dimension,<span class="number">1</span>), dtype=np.float32)    <span class="comment">#2行1列的矩阵</span></span><br><span class="line">    loss_collection = []                            <span class="comment">#新列表</span></span><br><span class="line">    loss = <span class="number">1</span></span><br><span class="line">    iteration_count = <span class="number">0</span>                             <span class="comment">#记录循环次数</span></span><br><span class="line">    <span class="keyword">while</span> loss &gt; <span class="number">0.001</span> <span class="keyword">and</span> iteration_count &lt; max_iteration_count:     <span class="comment">#当循环能进行时</span></span><br><span class="line">        loss = <span class="number">0</span></span><br><span class="line">        gradient = np.zeros((dimension,<span class="number">1</span>), dtype=np.float32)</span><br><span class="line">        <span class="comment">#  不同于BGD的是，这里随机取一个样本进行权重更新</span></span><br><span class="line">        sample_index = random.randint(<span class="number">0</span>, sample_num-<span class="number">1</span>)</span><br><span class="line">        predict_y = np.dot(w.T, samples[sample_index])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(dimension):</span><br><span class="line">            gradient[j] += (predict_y - y[sample_index]) * samples[sample_index][j]</span><br><span class="line">            w[j] -= step_size * gradient[j]                   <span class="comment">#不断更新权重</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(sample_num):</span><br><span class="line">            predict_y = np.dot(w.T, samples[i])</span><br><span class="line">            loss += np.power((predict_y - y[i]), <span class="number">2</span>)</span><br><span class="line">        loss_collection.append(loss)</span><br><span class="line">        iteration_count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> w,loss_collection</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    samples = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>],</span><br><span class="line">                        [<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>]]).T<span class="comment">#转置后变成4行2列的矩阵</span></span><br><span class="line">    y = np.array([<span class="number">19</span>,<span class="number">26</span>,<span class="number">19</span>,<span class="number">20</span>]).reshape((<span class="number">4</span>,<span class="number">1</span>))</span><br><span class="line">    D,loss=sgd(samples,y)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>,i+<span class="number">1</span>,<span class="string">&quot;个参数的值：&quot;</span>,D[i])</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第 <span class="number">1</span> 个参数的值： [<span class="number">2.8565211</span>]</span><br><span class="line">第 <span class="number">2</span> 个参数的值： [<span class="number">4.6394463</span>]</span><br></pre></td></tr></table></figure>



<h3 id="波斯顿房价预测"><a href="#波斯顿房价预测" class="headerlink" title="波斯顿房价预测"></a>波斯顿房价预测</h3><hr>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.utils <span class="keyword">import</span> shuffle</span><br><span class="line">df = pd.read_csv(<span class="string">&quot;E\人工智能资料\boston.csv&quot;</span>)</span><br><span class="line">df = np.array(df.values,ndmin=<span class="number">2</span>)</span><br><span class="line">x_data = df[:,:<span class="number">12</span>]</span><br><span class="line"><span class="comment">#归一化</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    x_data[:,i] = (x_data[:,i]-x_data[:,i].<span class="built_in">min</span>())/(x_data[:,i].<span class="built_in">max</span>()-x_data[:,i].<span class="built_in">min</span>())</span><br><span class="line">y_data = df[:,<span class="number">12</span>]</span><br><span class="line"><span class="comment">#将后10个作为测试集，不参加训练</span></span><br><span class="line">test_x = x_data[-<span class="number">10</span>:]</span><br><span class="line">test_y = y_data[-<span class="number">10</span>:]</span><br><span class="line"><span class="comment">#初始化参数</span></span><br><span class="line">w = np.random.normal(<span class="number">0.0</span>,<span class="number">1.0</span>,(<span class="number">1</span>,<span class="number">12</span>))<span class="comment">#初始化权值</span></span><br><span class="line">b = <span class="number">0.0</span></span><br><span class="line"><span class="comment">#设置训练轮次</span></span><br><span class="line">train_epochs = <span class="number">200</span></span><br><span class="line">learing_rate = <span class="number">0.001</span><span class="comment">#学习率</span></span><br><span class="line">loss_=[]<span class="comment">#初始化一个列表</span></span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(train_epochs):</span><br><span class="line">    loss=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x_data)):</span><br><span class="line">        re = w.dot(x_data[i])+b<span class="comment">#预测值</span></span><br><span class="line">        err = y_data[i]-re<span class="comment">#真实值与预测值的差</span></span><br><span class="line">        w +=learing_rate*err*x_data[i]<span class="comment">#用于更新权值</span></span><br><span class="line">        b +=learing_rate*err<span class="comment">#常数不断更新</span></span><br><span class="line">        <span class="comment">#记录误差</span></span><br><span class="line">        loss.append(<span class="built_in">abs</span>(err))</span><br><span class="line">    loss_.append(<span class="built_in">sum</span>(loss)/<span class="built_in">len</span>(loss))</span><br><span class="line">    <span class="comment">#print(sum(loss)/len(loss))</span></span><br><span class="line">    <span class="comment">#随机打乱训练集中的样本，防止模型出现结果和输入的位置有关的情况</span></span><br><span class="line">    x_data,y_data = shuffle(x_data,y_data)</span><br><span class="line"><span class="comment">#打印误差的变化情况</span></span><br><span class="line">plt.plot(loss_)</span><br><span class="line"><span class="comment">#简单的评估，看看实际值和预测值之间的误差</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;true:\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_y[i]),end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    pre = np.dot(w,test_x[i])+b</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;guess:\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(pre))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>数据集下载地址：<a href="https://pan.baidu.com/s/1mfC1lqQoUKH3fflao_hxwA">https://pan.baidu.com/s/1mfC1lqQoUKH3fflao_hxwA</a></p>
<p>提取码：15p5</p>
<p>参考<a href="https://blog.csdn.net/program_developer/article/details/78637711">https://blog.csdn.net/program_developer/article/details/78637711</a></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>了解机器学习</title>
    <url>/2022/01/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%BB%E8%A6%81%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p> 概念</p>
<span id="more"></span>
<h2 id="机器学习主要任务"><a href="#机器学习主要任务" class="headerlink" title="机器学习主要任务"></a>机器学习主要任务</h2><p>分类是机器学习的一项主要任务，主要是将实例数据划分到合适的分类中。</p>
<p>机器学习的另外一项任务是回归，主要是预测数值型的数据，比如通过数据值拟合曲线等。</p>
<p>分类和回归属于监督学习，这类算法必须知道预测什么，即目标变量的分类信息。与监督学习相对应的是无监督学习，此时数据没有类别信息，也不会给定目标值。在无监督学习中，将数据集合分成由类似的对象组成的多个类的过程称为“聚类”</p>
<h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><table>
<thead>
<tr>
<th>色泽</th>
<th>根蒂</th>
<th>敲声</th>
<th>好瓜</th>
</tr>
</thead>
<tbody><tr>
<td>青绿</td>
<td>蜷缩</td>
<td>浊响</td>
<td>是</td>
</tr>
<tr>
<td>乌黑</td>
<td>蜷缩</td>
<td>浊响</td>
<td>是</td>
</tr>
<tr>
<td>青绿</td>
<td>硬挺</td>
<td>清脆</td>
<td>否</td>
</tr>
<tr>
<td>乌黑</td>
<td>稍蜷</td>
<td>沉闷</td>
<td>否</td>
</tr>
</tbody></table>
<p>​       这是一系列关于西瓜的数据，这里的每个实体，或者每一行被称为一个样本或数据点，而每一列（用来描述这些实体的属性）则被称为特征。假如说，我们现在想通过色泽、根蒂、敲声这几个特征来区分一个西瓜是好瓜与不是好瓜，这就是一个分类问题。分类问题的目标是预测类别标签。在这个例子中，“是”与“否”则是预测类别的两个不同的标签。分类问题有时可分为二分类和多分类，西瓜的例子则是一个二分类问题，多分类指的是数据不止两个类别，它有多个类别。</p>
<h3 id="回归："><a href="#回归：" class="headerlink" title="回归："></a>回归：</h3><p>回归任务的目标是预测一个连续值，编程术语叫作浮点数。假如说我们现在手里得到的是如下数据：</p>
<table>
<thead>
<tr>
<th>色泽</th>
<th>根蒂</th>
<th>敲声</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td>青绿</td>
<td>蜷缩</td>
<td>浊响</td>
<td>2.1</td>
</tr>
<tr>
<td>乌黑</td>
<td>蜷缩</td>
<td>浊响</td>
<td>1.9</td>
</tr>
<tr>
<td>青绿</td>
<td>硬挺</td>
<td>清脆</td>
<td>1.6</td>
</tr>
<tr>
<td>乌黑</td>
<td>稍蜷</td>
<td>沉闷</td>
<td>1.5</td>
</tr>
</tbody></table>
<p>​      我们要通过色泽、根蒂、敲声来预测西瓜的价格，这就是一个回归问题。区分分类任务和回归任务有一个简单方法，就是看输出是否具有某种连续性。如果在可能的结果之间具有连续性，那么它就是一个回归问题，比如说价格。</p>
<h3 id="聚类："><a href="#聚类：" class="headerlink" title="聚类："></a>聚类：</h3><p>​      聚类属于无监督学习，它是指我们的数据只有输入，没有输出，并需要从这些数据中提取知识。聚类算法将数据划分成不同的组，每组包含相似的样本。比如说：</p>
<table>
<thead>
<tr>
<th>色泽</th>
<th>根蒂</th>
<th>敲声</th>
</tr>
</thead>
<tbody><tr>
<td>青绿</td>
<td>蜷缩</td>
<td>浊响</td>
</tr>
<tr>
<td>乌黑</td>
<td>蜷缩</td>
<td>浊响</td>
</tr>
<tr>
<td>青绿</td>
<td>硬挺</td>
<td>清脆</td>
</tr>
<tr>
<td>乌黑</td>
<td>稍蜷</td>
<td>沉闷</td>
</tr>
</tbody></table>
<p>​      我们现在手里的数据只有色泽、根蒂、敲声这几个特征，我们通过这三个特征，把性状相似的西瓜分到一个组，这就是一个聚类问题。聚类问题与分类问题的本质区别就是有没有标签。</p>
<h2 id="测试集和训练集"><a href="#测试集和训练集" class="headerlink" title="测试集和训练集"></a>测试集和训练集</h2><h3 id="为什么要有训练集与测试集"><a href="#为什么要有训练集与测试集" class="headerlink" title="为什么要有训练集与测试集"></a>为什么要有训练集与测试集</h3><p>​          我们想要利用收集的西瓜数据构建一个机器学习模型，用来预测新的西瓜的好坏，但在将模型用于新的测量数据之前，我们需要知道模型是否有效，也就是说，我们是否应该相信它的预测结果。不幸的是，我们不能将用于构建模型的数据用于评估模型的性能。因为我们的模型会一直记住整个训练集，所以，对于训练集中的任何数据点总会预测成正确的标签。这种记忆无法告诉我们模型的泛化能力如何，即预测新样本的能力如何。我们要用新数据来评估模型的性能。新数据是指模型之前没见过的数据，而我们有这些新数据的标签。通常的做法是，我们把手头上的数据分为两部分，训练集与测试集。训练集用来构建机器学习模型，测试集用来评估模型性</p>
<h5 id="如何划分训练集与测试集"><a href="#如何划分训练集与测试集" class="headerlink" title="如何划分训练集与测试集"></a>如何划分训练集与测试集</h5><p>​         通常我们将手头数据的百分之 70 或 80 用来训练数据，剩下的百分之 30 或 20 作为测试用来评估模型性能。值得注意的是，在划分数据集之前，我们要先把手头上的数据的顺序打乱，因为我们搜集数据时，数据可能是按照标签排放的。比如，现在有 100 个西瓜的数据，前 50 个是好瓜，后 50 个是坏瓜，如果将后面的 30 个西瓜数据当做测试集，这时测试集中只有坏瓜一个类别，这无法告诉我们模型的泛化能力如何，所以我们将数据打乱，确保测试集中包含所有类别的数据。</p>
<h2 id="欠拟合与过拟合"><a href="#欠拟合与过拟合" class="headerlink" title="欠拟合与过拟合"></a>欠拟合与过拟合</h2><h5 id="什么是欠拟合与欠拟合的原因"><a href="#什么是欠拟合与欠拟合的原因" class="headerlink" title="什么是欠拟合与欠拟合的原因"></a>什么是欠拟合与欠拟合的原因</h5><ul>
<li>欠拟合：模型在训练集上误差很高；</li>
<li>欠拟合原因：模型过于简单，没有很好的捕捉到数据特征，不能很好的拟合数据。</li>
</ul>
<h5 id="什么是过拟合与过拟合的原因"><a href="#什么是过拟合与过拟合的原因" class="headerlink" title="什么是过拟合与过拟合的原因"></a>什么是过拟合与过拟合的原因</h5><ul>
<li><p>过拟合：在训练集上误差低，测试集上误差高；</p>
</li>
<li><p>过拟合原因：模型把数据学习的太彻底，以至于把噪声数据的特征也学习到了，这样就会导致在后期测试的时候不能够很好地识别数据，模型泛化能力太差。</p>
</li>
</ul>
<h2 id="验证集与交叉验证"><a href="#验证集与交叉验证" class="headerlink" title="验证集与交叉验证"></a>验证集与交叉验证</h2><h5 id="为什么需要验证集"><a href="#为什么需要验证集" class="headerlink" title="为什么需要验证集"></a>为什么需要验证集</h5><p>​       在机器学习中，通常需要评估若⼲候选模型的表现并从中选择模型。这⼀过程称为模型选择。可供选择的候选模型可以是有着不同超参数的同类模型。以神经网络为例，我们可以选择隐藏层的个数，学习率大小和激活函数。为了得到有效的模型，我们通常要在模型选择上下⼀番功夫。从严格意义上讲，测试集只能在所有超参数和模型参数选定后使⽤⼀次。不可以使⽤测试数据选择模型，如调参。由于⽆法从训练误差估计泛化误差，因此也不应只依赖训练数据选择模型。鉴于此，我们可以预留⼀部分在训练数据集和测试数据集以外的数据来进⾏模型选择。这部分数据被称为验证数据集，简称验证集。</p>
<p>​      为了方便大家理解，举一个生活中的案例进行类比，我们一般是通过考试衡量学生的学习情况。老师上完课后，给学生布置的作业相当于训练数据集，中期的测试题相当于验证集，期末考试题相当于测试数据集。为了更加客观的衡量学生学习情况，期末考试题的内容不应该出现在平常的作业题和中期的测试题中，因为之前做过的题，对于计算机而言，相当于已经记住了，如果再次做同样的题，准确率就会很高。同样的道理，平常的作业题也不应该出现在中期的测试题里。中期的测试题，是为了掌握学生的学习情况，了解自己哪些方面内容没掌握，从而调整下一步学习的方向，为期末考试做好准备。</p>
<h5 id="k折交叉验证"><a href="#k折交叉验证" class="headerlink" title="k折交叉验证"></a>k折交叉验证</h5><p>​     由于验证数据集不参与模型训练，当训练数据不够⽤时，预留⼤量的验证数据显得太奢侈。⼀种改善的⽅法是 K 折交叉验证。在 K 折交叉验证中，我们把原始训练数据集分割成 K 个不重合的⼦数据集，然后我们做K次模型训练和验证。每⼀次，我们使⽤⼀个⼦数据集验证模型，并使⽤其它 K−1 个⼦数据集来训练模型。在这 K 次训练和验证中，每次⽤来验证模型的⼦数据集都不同。最后，我们对这 K 次训练误差和验证误差分别求平均。 k 的值由我们自己来指定</p>
<p>​    还是以考试为例，交叉验证，相当于把平常的作业题和中期的测试题合并成一个题库，然后等分成几份。将题库分成了五份，第一行的意思是，先让学生做后面的四份训练题，再用第一份题进行测试。以此类推，再重复四次，每一次相当于重新进行学习。最后，取五次的平均成绩，平均成绩高，说明老师的教学方法好，对应到模型，就是超参数更好。</p>
<p>待完善……..</p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>C++核心编程</title>
    <url>/2022/01/19/C++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p> C++</p>
<span id="more"></span>

<p>本阶段主要针对C++==面向对象==编程技术做详细讲解，探讨C++中的核心和精髓。</p>
<h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p>
<ul>
<li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li>
<li>全局区：存放全局变量和静态变量以及常量</li>
<li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li>
<li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li>
</ul>
<p><strong>内存四区意义：</strong></p>
<p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p>
<h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>​    在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p>
<p>​    <strong>代码区：</strong></p>
<p>​        存放 CPU 执行的机器指令</p>
<p>​        代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p>
<p>​        代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p>
<p>​    <strong>全局区：</strong></p>
<p>​        全局变量和静态变量存放在此.</p>
<p>​        全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p>
<p>​        ==该区域的数据在程序结束后由操作系统释放==.</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">int</span> g_a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c_g_a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c_g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//局部变量</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打印地址</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;局部变量a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;局部变量b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;全局变量g_a地址为： &quot;</span> &lt;&lt;  (<span class="keyword">int</span>)&amp;g_a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;全局变量g_b地址为： &quot;</span> &lt;&lt;  (<span class="keyword">int</span>)&amp;g_b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态变量</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> s_a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> s_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;静态变量s_a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;s_a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;静态变量s_b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;s_b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;<span class="string">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;<span class="string">&quot;hello world1&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;全局常量c_g_a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_g_a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;全局常量c_g_b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_g_b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> c_l_a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> c_l_b = <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;局部常量c_l_a地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_l_a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;局部常量c_l_b地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;c_l_b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<p><img src="assets/1545017602518.png" alt="1545017602518"></p>
<p>总结：</p>
<ul>
<li>C++中在程序运行前分为全局区和代码区</li>
<li>代码区特点是共享和只读</li>
<li>全局区中存放全局变量、静态变量、常量</li>
<li>常量区中存放 const修饰的全局常量  和 字符串常量</li>
</ul>
<h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><p>​    <strong>栈区：</strong></p>
<p>​        由编译器自动分配释放, 存放函数的参数值,局部变量等</p>
<p>​        注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> * <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p = <span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p>​    <strong>堆区：</strong></p>
<p>​        由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p>
<p>​        在C++中主要利用new在堆区开辟内存</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p = <span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>总结：</strong></p>
<p>堆区数据由程序员管理开辟和释放</p>
<p>堆区数据利用new关键字进行开辟内存</p>
<h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><p>​    C++中利用==new==操作符在堆区开辟数据</p>
<p>​    堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==</p>
<p>​    语法：<code> new 数据类型</code></p>
<p>​    利用new创建的数据，会返回该数据对应的类型的指针</p>
<p><strong>示例1： 基本语法</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p = <span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用delete释放堆区数据</span></span><br><span class="line">	<span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>示例2：开辟数组</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆区开辟数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		arr[i] = i + <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//释放数组 delete 后加 []</span></span><br><span class="line">	<span class="keyword">delete</span>[] arr;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>











<h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p>**作用： **给变量起别名</p>
<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul>
<li>引用必须初始化</li>
<li>引用在初始化后，不可以改变</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="comment">//int &amp;c; //错误，引用必须初始化</span></span><br><span class="line">	<span class="keyword">int</span> &amp;c = a; <span class="comment">//一旦初始化后，就不可以更改</span></span><br><span class="line">	c = b; <span class="comment">//这是赋值操作，不是更改引用</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p>
<p><strong>优点：</strong>可以简化指针修改实参</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap01</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap02</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *a;</span><br><span class="line">	*a = *b;</span><br><span class="line">	*b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 引用传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap03</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">mySwap01</span>(a, b);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">mySwap02</span>(&amp;a, &amp;b);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">mySwap03</span>(a, b);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>
</blockquote>
<h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p>
<p>注意：<strong>不要返回局部变量引用</strong></p>
<p>用法：函数调用作为左值</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回局部变量引用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//局部变量</span></span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回静态变量引用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//不能返回局部变量的引用</span></span><br><span class="line">	<span class="keyword">int</span>&amp; ref = <span class="built_in">test01</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果函数做左值，那么必须返回引用</span></span><br><span class="line">	<span class="keyword">int</span>&amp; ref2 = <span class="built_in">test02</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test02</span>() = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>​    </p>
<h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p>
<p>讲解示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发现是引用，转换为 int* const ref = &amp;a;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>&amp; ref)</span></span>&#123;</span><br><span class="line">	ref = <span class="number">100</span>; <span class="comment">// ref是引用，转换为*ref = 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class="line">	<span class="keyword">int</span>&amp; ref = a; </span><br><span class="line">	ref = <span class="number">20</span>; <span class="comment">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span></span><br><span class="line">    </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">func</span>(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>
<h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p>
<p>在函数形参列表中，可以加==const修饰形参==，防止形参改变实参</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用使用的场景，通常用来修饰形参</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showValue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//v += 10;</span></span><br><span class="line">	cout &lt;&lt; v &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span></span><br><span class="line">	<span class="comment">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span>&amp; ref = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//ref = 100;  //加入const后不可以修改变量</span></span><br><span class="line">	cout &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//函数中利用常量引用防止误操作修改实参</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">showValue</span>(a);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3 函数提高"></a>3 函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p>
<p>语法：<code> 返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">10</span>, <span class="keyword">int</span> c = <span class="number">10</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span></span><br><span class="line"><span class="comment">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a = <span class="number">10</span>, <span class="keyword">int</span> b = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; <span class="built_in">func</span>(<span class="number">20</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; <span class="built_in">func</span>(<span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p>
<p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p>
<p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数占位参数 ，占位参数也可以有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;this is func&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">func</span>(<span class="number">10</span>,<span class="number">10</span>); <span class="comment">//占位参数必须填补</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p>
<p><strong>函数重载满足条件：</strong></p>
<ul>
<li>同一个作用域下</li>
<li>函数名称相同</li>
<li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>
</ul>
<p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数重载需要函数都在同一个作用域下</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;func 的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;func (int a) 的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;func (double a)的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;func (int a ,double b) 的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;func (double a ,int b)的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值不可以作为函数重载条件</span></span><br><span class="line"><span class="comment">//int func(double a, int b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">func</span>();</span><br><span class="line">	<span class="built_in">func</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="built_in">func</span>(<span class="number">3.14</span>);</span><br><span class="line">	<span class="built_in">func</span>(<span class="number">10</span>,<span class="number">3.14</span>);</span><br><span class="line">	<span class="built_in">func</span>(<span class="number">3.14</span> , <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul>
<li>引用作为重载条件</li>
<li>函数重载碰到函数默认参数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数重载注意事项</span></span><br><span class="line"><span class="comment">//1、引用作为重载条件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、函数重载碰到函数默认参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;func2(int a) 调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">func</span>(a); <span class="comment">//调用无const</span></span><br><span class="line">	<span class="built_in">func</span>(<span class="number">10</span>);<span class="comment">//调用有const</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//func2(10); //碰到默认参数产生歧义，需要避免</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="4 类和对象"></a><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：==封装、继承、多态==</p>
<p>C++认为==万事万物都皆为对象==，对象上有其属性和行为</p>
<p><strong>例如：</strong></p>
<p>​    人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p>
<p>​    车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p>
<p>​    具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</p>
<h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p>
<p>封装的意义：</p>
<ul>
<li>将属性和行为作为一个整体，表现生活中的事物</li>
<li>将属性和行为加以权限控制</li>
</ul>
<p><strong>封装意义一：</strong></p>
<p>​    在设计类的时候，属性和行为写在一起，表现事物</p>
<p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p>
<p><strong>示例1：</strong>设计一个圆类，求圆的周长</p>
<p><strong>示例代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//圆周率</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、封装的意义</span></span><br><span class="line"><span class="comment">//将属性和行为作为一个整体，用来表现生活中的事物</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个圆类，求圆的周长</span></span><br><span class="line"><span class="comment">//class代表设计一个类，后面跟着的是类名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:  <span class="comment">//访问权限  公共的权限</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">	<span class="keyword">int</span> m_r;<span class="comment">//半径</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//行为</span></span><br><span class="line">	<span class="comment">//获取到圆的周长</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">calculateZC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//2 * pi  * r</span></span><br><span class="line">		<span class="comment">//获取圆的周长</span></span><br><span class="line">		<span class="keyword">return</span>  <span class="number">2</span> * PI * m_r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过圆类，创建圆的对象</span></span><br><span class="line">	<span class="comment">// c1就是一个具体的圆</span></span><br><span class="line">	Circle c1;</span><br><span class="line">	c1.m_r = <span class="number">10</span>; <span class="comment">//给圆对象的半径 进行赋值操作</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2 * pi * 10 = = 62.8</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.<span class="built_in">calculateZC</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p>
<p><strong>示例2代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123;</span><br><span class="line">		m_name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setID</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		m_id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">showStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot; ID:&quot;</span> &lt;&lt; m_id &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string m_name;</span><br><span class="line">	<span class="keyword">int</span> m_id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Student stu;</span><br><span class="line">	stu.<span class="built_in">setName</span>(<span class="string">&quot;德玛西亚&quot;</span>);</span><br><span class="line">	stu.<span class="built_in">setID</span>(<span class="number">250</span>);</span><br><span class="line">	stu.<span class="built_in">showStudent</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>









<p><strong>封装意义二：</strong></p>
<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>
<p>访问权限有三种：</p>
<ol>
<li>public        公共权限  </li>
<li>protected 保护权限</li>
<li>private      私有权限</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//三种权限</span></span><br><span class="line"><span class="comment">//公共权限  public     类内可以访问  类外可以访问</span></span><br><span class="line"><span class="comment">//保护权限  protected  类内可以访问  类外不可以访问</span></span><br><span class="line"><span class="comment">//私有权限  private    类内可以访问  类外不可以访问</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//姓名  公共权限</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string m_Name;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//汽车  保护权限</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	string m_Car;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//银行卡密码  私有权限</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">		m_Car = <span class="string">&quot;拖拉机&quot;</span>;</span><br><span class="line">		m_Password = <span class="number">123456</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Person p;</span><br><span class="line">	p.m_Name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">	<span class="comment">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span></span><br><span class="line">	<span class="comment">//p.m_Password = 123; //私有权限类外访问不到</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>
<p>区别：</p>
<ul>
<li>struct 默认权限为公共</li>
<li>class   默认权限为私有</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span>  m_A; <span class="comment">//默认是私有权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">C2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> m_A;  <span class="comment">//默认是公共权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	C1 c1;</span><br><span class="line">	c1.m_A = <span class="number">10</span>; <span class="comment">//错误，访问权限是私有</span></span><br><span class="line"></span><br><span class="line">	C2 c2;</span><br><span class="line">	c2.m_A = <span class="number">10</span>; <span class="comment">//正确，访问权限是公共</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p>
<p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//姓名设置可读可写</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123;</span><br><span class="line">		m_Name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取年龄 </span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//设置年龄</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">150</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;你个老妖精!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//情人设置为只写</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setLover</span><span class="params">(string lover)</span> </span>&#123;</span><br><span class="line">		m_Lover = lover;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string m_Name; <span class="comment">//可读可写  姓名</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> m_Age; <span class="comment">//只读  年龄</span></span><br><span class="line"></span><br><span class="line">	string m_Lover; <span class="comment">//只写  情人</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Person p;</span><br><span class="line">	<span class="comment">//姓名设置</span></span><br><span class="line">	p.<span class="built_in">setName</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//年龄设置</span></span><br><span class="line">	p.<span class="built_in">setAge</span>(<span class="number">50</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄： &quot;</span> &lt;&lt; p.<span class="built_in">getAge</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//情人设置</span></span><br><span class="line">	p.<span class="built_in">setLover</span>(<span class="string">&quot;苍井&quot;</span>);</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<p><strong>练习案例1：设计立方体类</strong></p>
<p>设计立方体类(Cube)</p>
<p>求出立方体的面积和体积</p>
<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>
<p><img src="assets/1545533548532.png" alt="1545533548532"></p>
<p>练习题代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cft</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Enter</span><span class="params">(<span class="keyword">int</span> h,<span class="keyword">int</span> l,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_H=h;</span><br><span class="line">		m_L=l;</span><br><span class="line">		m_W=w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获得立方体面积 </span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">GetS</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (m_H*m_L*<span class="number">2</span>+m_H*m_W*<span class="number">2</span>+m_W*m_L*<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获得立方体体积 </span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">GetT</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_H*m_L*m_W;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_H;</span><br><span class="line">	<span class="keyword">int</span> m_L;</span><br><span class="line">	<span class="keyword">int</span> m_W;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cft p1,p2;</span><br><span class="line">	p1.<span class="built_in">Enter</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p1面积为：&quot;</span>&lt;&lt;p1.<span class="built_in">GetS</span>()&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p1体积为：&quot;</span>&lt;&lt;p1.<span class="built_in">GetT</span>()&lt;&lt;endl;</span><br><span class="line">	p2.<span class="built_in">Enter</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p2面积为：&quot;</span>&lt;&lt;p2.<span class="built_in">GetS</span>()&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p2体积为：&quot;</span>&lt;&lt;p2.<span class="built_in">GetT</span>()&lt;&lt;endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><strong>练习案例2：点和圆的关系</strong></p>
<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>
<p><img src="assets/1545533829184.png" alt="1545533829184"></p>
<p>练习代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//点类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetX</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Dian_x=x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">GetX</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Dian_x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetY</span><span class="params">(<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Dian_y=y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">GetY</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Dian_y;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> Dian_x;</span><br><span class="line">	<span class="keyword">int</span> Dian_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//圆类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Setcenter</span><span class="params">(Point center)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_Center=center;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Point <span class="title">Getcenter</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Center;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetR</span><span class="params">(<span class="keyword">int</span> r)</span><span class="comment">//设置R </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Circle_R=r;</span><br><span class="line">	&#125;        </span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">GetR</span><span class="params">()</span><span class="comment">//获得R </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Circle_R;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Point m_Center;;</span><br><span class="line">	<span class="keyword">int</span> Circle_R;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断点和原的关系</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isInCircle</span><span class="params">(Circle &amp;c,Point &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> distance=(c.<span class="built_in">Getcenter</span>().<span class="built_in">GetX</span>()-p.<span class="built_in">GetX</span>())*(c.<span class="built_in">Getcenter</span>().<span class="built_in">GetX</span>()-p.<span class="built_in">GetX</span>())</span><br><span class="line">	+(c.<span class="built_in">Getcenter</span>().<span class="built_in">GetY</span>()-p.<span class="built_in">GetY</span>())*(c.<span class="built_in">Getcenter</span>().<span class="built_in">GetY</span>()-p.<span class="built_in">GetY</span>());</span><br><span class="line">	<span class="keyword">int</span> Rdistance=c.<span class="built_in">GetR</span>()*c.<span class="built_in">GetR</span>();</span><br><span class="line">	<span class="keyword">if</span>(distance==Rdistance)</span><br><span class="line">	 cout&lt;&lt;<span class="string">&quot;点在园上&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(distance&lt;Rdistance)</span><br><span class="line">	 cout&lt;&lt;<span class="string">&quot;点在园内&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	 cout&lt;&lt;<span class="string">&quot;点在园外&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Circle C;</span><br><span class="line">	Point center,P;<span class="comment">//通过center来设置圆心坐标，再通过P来设置一个点的坐标 ，然后用函数进行比较 </span></span><br><span class="line">	C.<span class="built_in">SetR</span>(<span class="number">10</span>);<span class="comment">//半径输入 </span></span><br><span class="line">	center.<span class="built_in">SetX</span>(<span class="number">10</span>);</span><br><span class="line">	center.<span class="built_in">SetY</span>(<span class="number">0</span>);</span><br><span class="line">	C.<span class="built_in">Setcenter</span>(center);</span><br><span class="line">	P.<span class="built_in">SetX</span>(<span class="number">20</span>);</span><br><span class="line">	P.<span class="built_in">SetY</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="comment">//判断关系 </span></span><br><span class="line">	<span class="built_in">isInCircle</span>(C,P);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul>
<li> 生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li>
<li> C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li>
</ul>
<h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>
<p>​    一个对象或者变量没有初始状态，对其使用后果是未知</p>
<p>​    同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>
<p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>
<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p>
<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>
<ul>
<li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li>
<li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li>
</ul>
<p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p>
<ol>
<li>构造函数，没有返回值也不写void</li>
<li>函数名称与类名相同</li>
<li>构造函数可以有参数，因此可以发生重载</li>
<li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li>
</ol>
<p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p>
<ol>
<li>析构函数，没有返回值也不写void</li>
<li>函数名称与类名相同,在名称前加上符号  ~</li>
<li>析构函数不可以有参数，因此不可以发生重载</li>
<li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Person的构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~<span class="built_in">Person</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Person的析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p>
<p>​    按参数分为： 有参构造和无参构造</p>
<p>​    按类型分为： 普通构造和拷贝构造</p>
<p>三种调用方式：</p>
<p>​    括号法</p>
<p>​    显示法</p>
<p>​    隐式转换法</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、构造函数分类</span></span><br><span class="line"><span class="comment">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span></span><br><span class="line"><span class="comment">// 按照类型分类分为 普通构造和拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//无参（默认）构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//有参构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">		age = a;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		age = p.age;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~<span class="built_in">Person</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、构造函数的调用</span></span><br><span class="line"><span class="comment">//调用无参构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Person p; <span class="comment">//调用无参构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用有参的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.1  括号法，常用</span></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="comment">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span></span><br><span class="line">	<span class="comment">//Person p2();</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.2 显式法</span></span><br><span class="line">	Person p2 = <span class="built_in">Person</span>(<span class="number">10</span>); </span><br><span class="line">	Person p3 = <span class="built_in">Person</span>(p2);</span><br><span class="line">	<span class="comment">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.3 隐式转换法</span></span><br><span class="line">	Person p4 = <span class="number">10</span>; <span class="comment">// Person p4 = Person(10); </span></span><br><span class="line">	Person p5 = p4; <span class="comment">// Person p5 = Person(p4); </span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span></span><br><span class="line">	<span class="comment">//Person p5(p4);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p>
<ul>
<li>使用一个已经创建完毕的对象来初始化一个新对象</li>
<li>值传递的方式给函数参数传值</li>
<li>以值方式返回局部对象</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		mAge = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">int</span> age) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		mAge = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		mAge = p.mAge;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数在释放内存之前调用</span></span><br><span class="line">	~<span class="built_in">Person</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">man</span><span class="params">(<span class="number">100</span>)</span></span>; <span class="comment">//p对象已经创建完毕</span></span><br><span class="line">	<span class="function">Person <span class="title">newman</span><span class="params">(man)</span></span>; <span class="comment">//调用拷贝构造函数</span></span><br><span class="line">	Person newman2 = man; <span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Person newman3;</span></span><br><span class="line">	<span class="comment">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 值传递的方式给函数参数传值</span></span><br><span class="line"><span class="comment">//相当于Person p1 = p;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">(Person p1)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Person p; <span class="comment">//无参构造函数</span></span><br><span class="line">	<span class="built_in">doWork</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 以值方式返回局部对象</span></span><br><span class="line"><span class="function">Person <span class="title">doWork2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p1;</span><br><span class="line">	cout &lt;&lt; (<span class="keyword">int</span> *)&amp;p1 &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person p = <span class="built_in">doWork2</span>();</span><br><span class="line">	cout &lt;&lt; (<span class="keyword">int</span> *)&amp;p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line">	<span class="built_in">test03</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p>
<p>1．默认构造函数(无参，函数体为空)</p>
<p>2．默认析构函数(无参，函数体为空)</p>
<p>3．默认拷贝构造函数，对属性进行值拷贝</p>
<p>构造函数调用规则如下：</p>
<ul>
<li>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</li>
</ul>
<ul>
<li>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//无参（默认）构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//有参构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line">		age = a;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		age = p.age;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~<span class="built_in">Person</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p2的年龄为： &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span></span><br><span class="line">	Person p1; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//用户提供的有参</span></span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>; <span class="comment">//此时如果用户没有提供拷贝构造，编译器会提供</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span></span><br><span class="line">	Person p4; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line">	<span class="function">Person <span class="title">p5</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//此时如果用户自己没有提供有参，会出错</span></span><br><span class="line">	<span class="function">Person <span class="title">p6</span><span class="params">(p5)</span></span>; <span class="comment">//用户自己提供拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p>
<p>浅拷贝：简单的赋值拷贝操作</p>
<p>深拷贝：在堆区重新申请空间，进行拷贝操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//无参（默认）构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//有参构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">int</span> age ,<span class="keyword">int</span> height) &#123;</span><br><span class="line">		</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		m_age = age;</span><br><span class="line">		m_height = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(height);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造函数  </span></span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span></span><br><span class="line">		m_age = p.m_age;</span><br><span class="line">		m_height = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(*p.m_height);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//析构函数</span></span><br><span class="line">	~<span class="built_in">Person</span>() &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (m_height != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_height;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_age;</span><br><span class="line">	<span class="keyword">int</span>* m_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>, <span class="number">180</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p1的年龄： &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p2的年龄： &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p>
</blockquote>
<h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p>
<p>C++提供了初始化列表语法，用来初始化属性</p>
<p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">////传统方式初始化</span></span><br><span class="line">	<span class="comment">//Person(int a, int b, int c) &#123;</span></span><br><span class="line">	<span class="comment">//	m_A = a;</span></span><br><span class="line">	<span class="comment">//	m_B = b;</span></span><br><span class="line">	<span class="comment">//	m_C = c;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化列表方式初始化</span></span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) :<span class="built_in">m_A</span>(a), <span class="built_in">m_B</span>(b), <span class="built_in">m_C</span>(c) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PrintPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">	p.<span class="built_in">PrintPerson</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    A a；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>B类中有对象A作为成员，A为对象成员</p>
<p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Phone</span>(string name)</span><br><span class="line">	&#123;</span><br><span class="line">		m_PhoneName = name;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Phone构造&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">Phone</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Phone析构&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	string m_PhoneName;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化列表可以告诉编译器调用哪一个构造函数</span></span><br><span class="line">	<span class="built_in">Person</span>(string name, string pName) :<span class="built_in">m_Name</span>(name), <span class="built_in">m_Phone</span>(pName)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Person构造&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	~<span class="built_in">Person</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Person析构&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; m_Name &lt;&lt; <span class="string">&quot; 使用&quot;</span> &lt;&lt; m_Phone.m_PhoneName &lt;&lt; <span class="string">&quot; 牌手机! &quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	string m_Name;</span><br><span class="line">	Phone m_Phone;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//当类中成员是其他类对象时，我们称该成员为 对象成员</span></span><br><span class="line">	<span class="comment">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span></span><br><span class="line">	<span class="comment">//析构顺序与构造相反</span></span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;张三&quot;</span> , <span class="string">&quot;苹果X&quot;</span>)</span></span>;</span><br><span class="line">	p.<span class="built_in">playGame</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>
<p>静态成员分为：</p>
<ul>
<li>静态成员变量<ul>
<li> 所有对象共享同一份数据</li>
<li> 在编译阶段分配内存</li>
<li> 类内声明，类外初始化</li>
</ul>
</li>
<li>静态成员函数<ul>
<li> 所有对象共享同一个函数</li>
<li> 静态成员函数只能访问静态成员变量</li>
</ul>
</li>
</ul>
<p><strong>示例1 ：</strong>静态成员变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员变量特点：</span></span><br><span class="line">	<span class="comment">//1 在编译阶段分配内存</span></span><br><span class="line">	<span class="comment">//2 类内声明，类外初始化</span></span><br><span class="line">	<span class="comment">//3 所有对象共享同一份数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_B; <span class="comment">//静态成员变量也是有访问权限的</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> Person::m_B = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、通过对象</span></span><br><span class="line">	Person p1;</span><br><span class="line">	p1.m_A = <span class="number">100</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	Person p2;</span><br><span class="line">	p2.m_A = <span class="number">200</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl; <span class="comment">//共享同一份数据</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、通过类名</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>示例2：</strong>静态成员函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员函数特点：</span></span><br><span class="line">	<span class="comment">//1 程序共享一个函数</span></span><br><span class="line">	<span class="comment">//2 静态成员函数只能访问静态成员变量</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">		m_A = <span class="number">100</span>;</span><br><span class="line">		<span class="comment">//m_B = 100; //错误，不可以访问非静态成员变量</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line">	<span class="keyword">int</span> m_B; <span class="comment">// </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态成员函数也是有访问权限的</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;func2调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、通过对象</span></span><br><span class="line">	Person p1;</span><br><span class="line">	p1.<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、通过类名</span></span><br><span class="line">	Person::<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//Person::func2(); //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p>
<p>只有非静态成员变量才属于类的对象上</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>() &#123;</span><br><span class="line">		mA = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//非静态成员变量占对象空间</span></span><br><span class="line">	<span class="keyword">int</span> mA;</span><br><span class="line">	<span class="comment">//静态成员变量不占对象空间</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> mB; </span><br><span class="line">	<span class="comment">//函数也不占对象空间，所有函数共享一个函数实例</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mA &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//静态成员函数也不占对象空间</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sfunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(Person) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p>
<p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p>
<p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p>
<p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p>
<p>this指针是隐含每一个非静态成员函数内的一种指针</p>
<p>this指针不需要定义，直接使用即可</p>
<p>this指针的用途：</p>
<ul>
<li> 当形参和成员变量同名时，可用this指针来区分</li>
<li> 在类的非静态成员函数中返回对象本身，可使用return *this</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person&amp; <span class="title">PersonAddPerson</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">		<span class="comment">//返回对象本身</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	p2.<span class="built_in">PersonAddPerson</span>(p1).<span class="built_in">PersonAddPerson</span>(p1).<span class="built_in">PersonAddPerson</span>(p1);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>
<p>如果用到this指针，需要加以判断保证代码的健壮性</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//空指针访问成员函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我是Person类!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; mAge &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Person * p = <span class="literal">NULL</span>;</span><br><span class="line">	p-&gt;<span class="built_in">ShowClassName</span>(); <span class="comment">//空指针，可以调用成员函数</span></span><br><span class="line">	p-&gt;<span class="built_in">ShowPerson</span>();  <span class="comment">//但是如果成员函数中用到了this指针，就不可以了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p>
<ul>
<li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li>
<li>常函数内不可以修改成员属性</li>
<li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li>
</ul>
<p><strong>常对象：</strong></p>
<ul>
<li>声明对象前加const称该对象为常对象</li>
<li>常对象只能调用常函数</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>() &#123;</span><br><span class="line">		m_A = <span class="number">0</span>;</span><br><span class="line">		m_B = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//this指针的本质是一个指针常量，指针的指向不可修改</span></span><br><span class="line">	<span class="comment">//如果想让指针指向的值也不可以修改，需要声明常函数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ShowPerson</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="comment">//const Type* const pointer;</span></span><br><span class="line">		<span class="comment">//this = NULL; //不能修改指针的指向 Person* const this;</span></span><br><span class="line">		<span class="comment">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;m_B = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">MyFunc</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="comment">//mA = 10000;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">mutable</span> <span class="keyword">int</span> m_B; <span class="comment">//可修改 可变的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰对象  常对象</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> Person person; <span class="comment">//常量对象  </span></span><br><span class="line">	cout &lt;&lt; person.m_A &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span></span><br><span class="line">	person.m_B = <span class="number">100</span>; <span class="comment">//但是常对象可以修改mutable修饰成员变量</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//常对象访问成员函数</span></span><br><span class="line">	person.<span class="built_in">MyFunc</span>(); <span class="comment">//常对象不能调用const的函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>








<h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p>
<p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p>
<p>但是呢，你也可以允许你的好闺蜜好基友进去。</p>
<p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p>
<p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p>
<p>友元的关键字为  ==friend==</p>
<p>友元的三种实现</p>
<ul>
<li>全局函数做友元</li>
<li>类做友元</li>
<li>成员函数做友元</li>
</ul>
<h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">goodGay</span><span class="params">(Building * building)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Building</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string m_BedRoom; <span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay</span><span class="params">(Building * building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Building b;</span><br><span class="line">	<span class="built_in">goodGay</span>(&amp;b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">goodGay</span>();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">goodGay</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::<span class="built_in">goodGay</span>()</span><br><span class="line">&#123;</span><br><span class="line">	building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	goodGay gg;</span><br><span class="line">	gg.<span class="built_in">visit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">goodGay</span>();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>; <span class="comment">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">visit2</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::<span class="built_in">goodGay</span>()</span><br><span class="line">&#123;</span><br><span class="line">	building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">goodGay::visit2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	goodGay  gg;</span><br><span class="line">	gg.<span class="built_in">visit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p>
<h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>() &#123;&#125;;</span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_A = a;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_B = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//成员函数实现 + 号运算符重载</span></span><br><span class="line">	Person <span class="keyword">operator</span>+(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">		Person temp;</span><br><span class="line">		temp.m_A = <span class="keyword">this</span>-&gt;m_A + p.m_A;</span><br><span class="line">		temp.m_B = <span class="keyword">this</span>-&gt;m_B + p.m_B;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现 + 号运算符重载</span></span><br><span class="line"><span class="comment">//Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;</span></span><br><span class="line"><span class="comment">//	Person temp(0, 0);</span></span><br><span class="line"><span class="comment">//	temp.m_A = p1.m_A + p2.m_A;</span></span><br><span class="line"><span class="comment">//	temp.m_B = p1.m_B + p2.m_B;</span></span><br><span class="line"><span class="comment">//	return temp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//运算符重载 可以发生函数重载 </span></span><br><span class="line">Person <span class="keyword">operator</span>+(<span class="keyword">const</span> Person&amp; p2, <span class="keyword">int</span> val)  </span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A = p2.m_A + val;</span><br><span class="line">	temp.m_B = p2.m_B + val;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//成员函数方式</span></span><br><span class="line">	Person p3 = p2 + p1;  <span class="comment">//相当于 p2.operaor+(p1)</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; p3.m_A &lt;&lt; <span class="string">&quot; mB:&quot;</span> &lt;&lt; p3.m_B &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	Person p4 = p3 + <span class="number">10</span>; <span class="comment">//相当于 operator+(p3,10)</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; p4.m_A &lt;&lt; <span class="string">&quot; mB:&quot;</span> &lt;&lt; p4.m_B &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p>
</blockquote>
<blockquote>
<p>总结2：不要滥用运算符重载</p>
</blockquote>
<h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_A = a;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_B = b;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span></span><br><span class="line">	<span class="comment">//void operator&lt;&lt;(Person&amp; p)&#123;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现左移重载</span></span><br><span class="line"><span class="comment">//ostream对象只能有一个</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;</span><br><span class="line">	out &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; p.m_B;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; p1 &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl; <span class="comment">//链式编程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p>
</blockquote>
<h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">MyInteger</span>() &#123;</span><br><span class="line">		m_Num = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//前置++</span></span><br><span class="line">	MyInteger&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">		<span class="comment">//先++</span></span><br><span class="line">		m_Num++;</span><br><span class="line">		<span class="comment">//再返回</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置++</span></span><br><span class="line">	MyInteger <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">		<span class="comment">//先返回</span></span><br><span class="line">		MyInteger temp = *<span class="keyword">this</span>; <span class="comment">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span></span><br><span class="line">		m_Num++;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;</span><br><span class="line">	out &lt;&lt; myint.m_Num;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置++ 先++ 再返回</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	MyInteger myInt;</span><br><span class="line">	cout &lt;&lt; ++myInt &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置++ 先返回 再++</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	MyInteger myInt;</span><br><span class="line">	cout &lt;&lt; myInt++ &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结： 前置递增返回引用，后置递增返回值</p>
</blockquote>
<h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p>
<ol>
<li>默认构造函数(无参，函数体为空)</li>
<li>默认析构函数(无参，函数体为空)</li>
<li>默认拷贝构造函数，对属性进行值拷贝</li>
<li>赋值运算符 operator=, 对属性进行值拷贝</li>
</ol>
<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Person</span>(<span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//将年龄数据开辟到堆区</span></span><br><span class="line">		m_Age = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(age);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//重载赋值运算符 </span></span><br><span class="line">	Person&amp; <span class="keyword">operator</span>=(Person &amp;p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Age;</span><br><span class="line">			m_Age = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//编译器提供的代码是浅拷贝</span></span><br><span class="line">		<span class="comment">//m_Age = p.m_Age;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//提供深拷贝 解决浅拷贝的问题</span></span><br><span class="line">		m_Age = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(*p.m_Age);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//返回自身</span></span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	~<span class="built_in">Person</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Age;</span><br><span class="line">			m_Age = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//年龄的指针</span></span><br><span class="line">	<span class="keyword">int</span> *m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	p3 = p2 = p1; <span class="comment">//赋值操作</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p3.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//int a = 10;</span></span><br><span class="line">	<span class="comment">//int b = 20;</span></span><br><span class="line">	<span class="comment">//int c = 30;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//c = b = a;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h4 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="keyword">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(Person &amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>!=(Person &amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//int a = 0;</span></span><br><span class="line">	<span class="comment">//int b = 0;</span></span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">a</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">b</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (a == b)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;a和b相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;a和b不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (a != b)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;a和b不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;a和b相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><ul>
<li>函数调用运算符 ()  也可以重载</li>
<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li>
<li>仿函数没有固定写法，非常灵活</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPrint</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string text)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; text &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line">	MyPrint myFunc;</span><br><span class="line">	<span class="built_in">myFunc</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> v1 + v2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MyAdd add;</span><br><span class="line">	<span class="keyword">int</span> ret = <span class="built_in">add</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//匿名对象调用  </span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;MyAdd()(100,100) = &quot;</span> &lt;&lt; <span class="built_in">MyAdd</span>()(<span class="number">100</span>, <span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6  继承"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p>
<p>有些类与类之间存在特殊的关系，例如下图中：</p>
<p><img src="assets/1544861202252.png" alt="1544861202252"></p>
<p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p>
<p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p>
<h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p>
<p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p>
<p><strong>普通实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPP</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Java页面</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	Java ja;</span><br><span class="line">	ja.<span class="built_in">header</span>();</span><br><span class="line">	ja.<span class="built_in">footer</span>();</span><br><span class="line">	ja.<span class="built_in">left</span>();</span><br><span class="line">	ja.<span class="built_in">content</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Python页面</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	Python py;</span><br><span class="line">	py.<span class="built_in">header</span>();</span><br><span class="line">	py.<span class="built_in">footer</span>();</span><br><span class="line">	py.<span class="built_in">left</span>();</span><br><span class="line">	py.<span class="built_in">content</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++页面</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	CPP cp;</span><br><span class="line">	cp.<span class="built_in">header</span>();</span><br><span class="line">	cp.<span class="built_in">footer</span>();</span><br><span class="line">	cp.<span class="built_in">left</span>();</span><br><span class="line">	cp.<span class="built_in">content</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>继承实现：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公共页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Java</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPP</span> :</span> <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//Java页面</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	Java ja;</span><br><span class="line">	ja.<span class="built_in">header</span>();</span><br><span class="line">	ja.<span class="built_in">footer</span>();</span><br><span class="line">	ja.<span class="built_in">left</span>();</span><br><span class="line">	ja.<span class="built_in">content</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Python页面</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	Python py;</span><br><span class="line">	py.<span class="built_in">header</span>();</span><br><span class="line">	py.<span class="built_in">footer</span>();</span><br><span class="line">	py.<span class="built_in">left</span>();</span><br><span class="line">	py.<span class="built_in">content</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++页面</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	CPP cp;</span><br><span class="line">	cp.<span class="built_in">header</span>();</span><br><span class="line">	cp.<span class="built_in">footer</span>();</span><br><span class="line">	cp.<span class="built_in">left</span>();</span><br><span class="line">	cp.<span class="built_in">content</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>总结：</strong></p>
<p>继承的好处：==可以减少重复的代码==</p>
<p>class A : public B; </p>
<p>A 类称为子类 或 派生类</p>
<p>B 类称为父类 或 基类</p>
<p><strong>派生类中的成员，包含两大部分</strong>：</p>
<p>一类是从基类继承过来的，一类是自己增加的成员。</p>
<p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p>
<h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p>
<p><strong>继承方式一共有三种：</strong></p>
<ul>
<li>公共继承</li>
<li>保护继承</li>
<li>私有继承</li>
</ul>
<p><img src="assets/clip_image002.png" alt="img"></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span> :</span><span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A; <span class="comment">//可访问 public权限</span></span><br><span class="line">		m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line">		<span class="comment">//m_C; //不可访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son1 s1;</span><br><span class="line">	s1.m_A; <span class="comment">//其他类只能访问到公共权限</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>:</span><span class="keyword">protected</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A; <span class="comment">//可访问 protected权限</span></span><br><span class="line">		m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line">		<span class="comment">//m_C; //不可访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myClass2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son2 s;</span><br><span class="line">	<span class="comment">//s.m_A; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>:</span><span class="keyword">private</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		m_A; <span class="comment">//可访问 private权限</span></span><br><span class="line">		m_B; <span class="comment">//可访问 private权限</span></span><br><span class="line">		<span class="comment">//m_C; //不可访问</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandSon3</span> :</span><span class="keyword">public</span> Son3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span></span><br><span class="line">		<span class="comment">//m_A;</span></span><br><span class="line">		<span class="comment">//m_B;</span></span><br><span class="line">		<span class="comment">//m_C;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>









<h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C; <span class="comment">//私有成员只是被隐藏了，但是还是会继承下去</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(Son) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>利用工具查看：</p>
<p><img src="assets/1545881904150.png" alt="1545881904150"></p>
<p>打开工具窗口后，定位到当前CPP文件的盘符</p>
<p>然后输入： cl /d1 reportSingleClassLayout查看的类名   所属文件名</p>
<p>效果如下图：</p>
<p><img src="assets/1545882158050.png" alt="1545882158050"></p>
<blockquote>
<p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p>
</blockquote>
<h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p>
<p>问题：父类和子类的构造和析构顺序是谁先谁后？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Base</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Son</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Son构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Son</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Son析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span></span><br><span class="line">	Son s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p>
</blockquote>
<h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p>
<ul>
<li>访问子类同名成员   直接访问即可</li>
<li>访问父类同名成员   需要加作用域</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base - func()调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base - func(int a)调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Son</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">200</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span></span><br><span class="line">	<span class="comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Son - func()调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Son下的m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Base下的m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	s.<span class="built_in">func</span>();</span><br><span class="line">	s.Base::<span class="built_in">func</span>();</span><br><span class="line">	s.Base::<span class="built_in">func</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li>子类对象可以直接访问到子类中同名成员</li>
<li>子类对象加作用域可以访问到父类同名成员</li>
<li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li>
</ol>
<h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>
<p>静态成员和非静态成员出现同名，处理方式一致</p>
<ul>
<li>访问子类同名成员   直接访问即可</li>
<li>访问父类同名成员   需要加作用域</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base - static void func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base - static void func(int a)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Base::m_A = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Son - static void func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Son::m_A = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员属性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象访问</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	Son s;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过类名访问</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象访问</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	Son s;</span><br><span class="line">	s.<span class="built_in">func</span>();</span><br><span class="line">	s.Base::<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	Son::<span class="built_in">func</span>();</span><br><span class="line">	Son::Base::<span class="built_in">func</span>();</span><br><span class="line">	<span class="comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class="line">	Son::Base::<span class="built_in">func</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p>
</blockquote>
<h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p>
<p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p>
<p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p>
<p><strong>C++实际开发中不建议用多继承</strong></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base1</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base2</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		m_A = <span class="number">200</span>;  <span class="comment">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base1 </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Son</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		m_C = <span class="number">300</span>;</span><br><span class="line">		m_D = <span class="number">400</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_C;</span><br><span class="line">	<span class="keyword">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多继承容易产生成员同名的情况</span></span><br><span class="line"><span class="comment">//通过使用类名作用域可以区分调用哪一个基类的成员</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(s) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p>
</blockquote>
<h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p>
<p>​    两个派生类继承同一个基类</p>
<p>​    又有某个类同时继承者两个派生类</p>
<p>​    这种继承被称为菱形继承，或者钻石继承</p>
<p><strong>典型的菱形继承案例：</strong></p>
<p><img src="assets/clip_image002.jpg" alt="IMG_256"></p>
<p><strong>菱形继承问题：</strong></p>
<ol>
<li><pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。
</code></pre>
</li>
<li><p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承前加virtual关键字后，变为虚继承</span></span><br><span class="line"><span class="comment">//此时公共的父类Animal称为虚基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tuo</span>   :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SheepTuo</span> :</span> <span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SheepTuo st;</span><br><span class="line">	st.Sheep::m_Age = <span class="number">100</span>;</span><br><span class="line">	st.Tuo::m_Age = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>总结：</p>
<ul>
<li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li>
<li>利用虚继承可以解决菱形继承问题</li>
</ul>
<h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7  多态"></a>4.7  多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p>
<p>多态分为两类</p>
<ul>
<li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li>
<li>动态多态: 派生类和虚函数实现运行时多态</li>
</ul>
<p>静态多态和动态多态区别：</p>
<ul>
<li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li>
<li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li>
</ul>
<p>下面通过案例进行讲解多态</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//Speak函数就是虚函数</span></span><br><span class="line">	<span class="comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;动物在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;小猫在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;小狗在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//我们希望传入什么对象，那么就调用什么对象的函数</span></span><br><span class="line"><span class="comment">//如果函数地址在编译阶段就能确定，那么静态联编</span></span><br><span class="line"><span class="comment">//如果函数地址在运行阶段才能确定，就是动态联编</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoSpeak</span><span class="params">(Animal &amp; animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	animal.<span class="built_in">speak</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//多态满足条件： </span></span><br><span class="line"><span class="comment">//1、有继承关系</span></span><br><span class="line"><span class="comment">//2、子类重写父类中的虚函数</span></span><br><span class="line"><span class="comment">//多态使用：</span></span><br><span class="line"><span class="comment">//父类指针或引用指向子类对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Cat cat;</span><br><span class="line">	<span class="built_in">DoSpeak</span>(cat);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	Dog dog;</span><br><span class="line">	<span class="built_in">DoSpeak</span>(dog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<p>多态满足条件</p>
<ul>
<li>有继承关系</li>
<li>子类重写父类中的虚函数</li>
</ul>
<p>多态使用条件</p>
<ul>
<li>父类指针或引用指向子类对象</li>
</ul>
<p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p>
<h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p>
<p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p>
<p>多态的优点：</p>
<ul>
<li>代码组织结构清晰</li>
<li>可读性强</li>
<li>利于前期和后期的扩展以及维护</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">(string oper)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (oper == <span class="string">&quot;+&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;-&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果要提供新的运算，需要修改源码</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> m_Num1;</span><br><span class="line">	<span class="keyword">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//普通实现测试</span></span><br><span class="line">	Calculator c;</span><br><span class="line">	c.m_Num1 = <span class="number">10</span>;</span><br><span class="line">	c.m_Num2 = <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.<span class="built_in">getResult</span>(<span class="string">&quot;+&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.<span class="built_in">getResult</span>(<span class="string">&quot;-&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; c.m_Num1 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; c.m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.<span class="built_in">getResult</span>(<span class="string">&quot;*&quot;</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多态实现</span></span><br><span class="line"><span class="comment">//抽象计算器类</span></span><br><span class="line"><span class="comment">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> m_Num1;</span><br><span class="line">	<span class="keyword">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘法计算器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MulCalculator</span> :</span><span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 * m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//创建加法计算器</span></span><br><span class="line">	AbstractCalculator *abc = <span class="keyword">new</span> AddCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">delete</span> abc;  <span class="comment">//用完了记得销毁</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建减法计算器</span></span><br><span class="line">	abc = <span class="keyword">new</span> SubCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">delete</span> abc;  </span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建乘法计算器</span></span><br><span class="line">	abc = <span class="keyword">new</span> MulCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">delete</span> abc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p>
</blockquote>
<h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p>
<p>因此可以将虚函数改为<strong>纯虚函数</strong></p>
<p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p>
<p>当类中有了纯虚函数，这个类也称为==抽象类==</p>
<p><strong>抽象类特点</strong>：</p>
<ul>
<li>无法实例化对象</li>
<li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//纯虚函数</span></span><br><span class="line">	<span class="comment">//类中只要有一个纯虚函数就称为抽象类</span></span><br><span class="line">	<span class="comment">//抽象类无法实例化对象</span></span><br><span class="line">	<span class="comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Base * base = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//base = new Base; // 错误，抽象类无法实例化对象</span></span><br><span class="line">	base = <span class="keyword">new</span> Son;</span><br><span class="line">	base-&gt;<span class="built_in">func</span>();</span><br><span class="line">	<span class="keyword">delete</span> base;<span class="comment">//记得销毁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p>
<p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p>
<p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p>
<p><img src="assets/1545985945198.png" alt="1545985945198"></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象制作饮品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDrinking</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//烧水</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//冲泡</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//倒入杯中</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//加入辅料</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//规定流程</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">MakeDrink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">Boil</span>();</span><br><span class="line">		<span class="built_in">Brew</span>();</span><br><span class="line">		<span class="built_in">PourInCup</span>();</span><br><span class="line">		<span class="built_in">PutSomething</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作咖啡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> :</span> <span class="keyword">public</span> AbstractDrinking &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//烧水</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;煮农夫山泉!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//冲泡</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;冲泡咖啡!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//倒入杯中</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;将咖啡倒入杯中!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//加入辅料</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;加入牛奶!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作茶水</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span> :</span> <span class="keyword">public</span> AbstractDrinking &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//烧水</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;煮自来水!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//冲泡</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;冲泡茶叶!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//倒入杯中</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;将茶水倒入杯中!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//加入辅料</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;加入枸杞!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoWork</span><span class="params">(AbstractDrinking* drink)</span> </span>&#123;</span><br><span class="line">	drink-&gt;<span class="built_in">MakeDrink</span>();</span><br><span class="line">	<span class="keyword">delete</span> drink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">DoWork</span>(<span class="keyword">new</span> Coffee);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;--------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">DoWork</span>(<span class="keyword">new</span> Tea);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



















<h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p>
<p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p>
<p>虚析构和纯虚析构共性：</p>
<ul>
<li>可以解决父类指针释放子类对象</li>
<li>都需要有具体的函数实现</li>
</ul>
<p>虚析构和纯虚析构区别：</p>
<ul>
<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>
</ul>
<p>虚析构语法：</p>
<p><code>virtual ~类名()&#123;&#125;</code></p>
<p>纯虚析构语法：</p>
<p><code> virtual ~类名() = 0;</code></p>
<p><code>类名::~类名()&#123;&#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Animal</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//析构函数加上virtual关键字，变成虚析构函数</span></span><br><span class="line">	<span class="comment">//virtual ~Animal()</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">Animal</span>() = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal::~<span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Cat</span>(string name)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		m_Name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; *m_Name &lt;&lt;  <span class="string">&quot;小猫在说话!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Cat</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Name;</span><br><span class="line">			m_Name = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string *m_Name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Animal *animal = <span class="keyword">new</span> <span class="built_in">Cat</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">	animal-&gt;<span class="built_in">Speak</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span></span><br><span class="line">	<span class="comment">//怎么解决？给基类增加一个虚析构函数</span></span><br><span class="line">	<span class="comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span></span><br><span class="line">	<span class="keyword">delete</span> animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>总结：</p>
<p>​    1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p>
<p>​    2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p>
<p>​    3. 拥有纯虚析构函数的类也属于抽象类</p>
<h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p>
<p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p>
<p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p>
<p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p>
<p>测试时组装三台不同的电脑进行工作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象CPU类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//抽象的计算函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象显卡类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoCard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//抽象的显示函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象内存条类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//抽象的存储函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Computer</span>(CPU * cpu, VideoCard * vc, Memory * mem)</span><br><span class="line">	&#123;</span><br><span class="line">		m_cpu = cpu;</span><br><span class="line">		m_vc = vc;</span><br><span class="line">		m_mem = mem;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//提供工作的函数</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//让零件工作起来，调用接口</span></span><br><span class="line">		m_cpu-&gt;<span class="built_in">calculate</span>();</span><br><span class="line"></span><br><span class="line">		m_vc-&gt;<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">		m_mem-&gt;<span class="built_in">storage</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//提供析构函数 释放3个电脑零件</span></span><br><span class="line">	~<span class="built_in">Computer</span>()</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//释放CPU零件</span></span><br><span class="line">		<span class="keyword">if</span> (m_cpu != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_cpu;</span><br><span class="line">			m_cpu = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//释放显卡零件</span></span><br><span class="line">		<span class="keyword">if</span> (m_vc != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_vc;</span><br><span class="line">			m_vc = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//释放内存条零件</span></span><br><span class="line">		<span class="keyword">if</span> (m_mem != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_mem;</span><br><span class="line">			m_mem = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">	CPU * m_cpu; <span class="comment">//CPU的零件指针</span></span><br><span class="line">	VideoCard * m_vc; <span class="comment">//显卡零件指针</span></span><br><span class="line">	Memory * m_mem; <span class="comment">//内存条零件指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体厂商</span></span><br><span class="line"><span class="comment">//Intel厂商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCPU</span> :</span><span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Intel的CPU开始计算了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelVideoCard</span> :</span><span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Intel的显卡开始显示了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelMemory</span> :</span><span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Intel的内存条开始存储了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lenovo厂商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoCPU</span> :</span><span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Lenovo的CPU开始计算了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoVideoCard</span> :</span><span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Lenovo的显卡开始显示了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoMemory</span> :</span><span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Lenovo的内存条开始存储了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//第一台电脑零件</span></span><br><span class="line">	CPU * intelCpu = <span class="keyword">new</span> IntelCPU;</span><br><span class="line">	VideoCard * intelCard = <span class="keyword">new</span> IntelVideoCard;</span><br><span class="line">	Memory * intelMem = <span class="keyword">new</span> IntelMemory;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;第一台电脑开始工作：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//创建第一台电脑</span></span><br><span class="line">	Computer * computer1 = <span class="keyword">new</span> <span class="built_in">Computer</span>(intelCpu, intelCard, intelMem);</span><br><span class="line">	computer1-&gt;<span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">delete</span> computer1;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;第二台电脑开始工作：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//第二台电脑组装</span></span><br><span class="line">	Computer * computer2 = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> LenovoVideoCard, <span class="keyword">new</span> LenovoMemory);;</span><br><span class="line">	computer2-&gt;<span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">delete</span> computer2;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;第三台电脑开始工作：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//第三台电脑组装</span></span><br><span class="line">	Computer * computer3 = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> IntelVideoCard, <span class="keyword">new</span> LenovoMemory);;</span><br><span class="line">	computer3-&gt;<span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">delete</span> computer3;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p>
<p>通过<strong>文件可以将数据持久化</strong></p>
<p>C++中对文件操作需要包含头文件 ==&lt; fstream &gt;==</p>
<p>文件类型分为两种：</p>
<ol>
<li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li>
<li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li>
</ol>
<p>操作文件的三大类:</p>
<ol>
<li>ofstream：写操作</li>
<li>ifstream： 读操作</li>
<li>fstream ： 读写操作</li>
</ol>
<h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p>
<ol>
<li><p>包含头文件   </p>
<p>  #include &lt;fstream&gt;</p>
</li>
<li><p>创建流对象  </p>
<p>ofstream ofs;</p>
</li>
<li><p>打开文件</p>
<p>ofs.open(“文件路径”,打开方式);</p>
</li>
<li><p>写数据</p>
<p>ofs &lt;&lt; “写入的数据”;</p>
</li>
<li><p>关闭文件</p>
<p>ofs.close();</p>
</li>
</ol>
<p>文件打开方式：</p>
<table>
<thead>
<tr>
<th>打开方式</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>ios::in</td>
<td>为读文件而打开文件</td>
</tr>
<tr>
<td>ios::out</td>
<td>为写文件而打开文件</td>
</tr>
<tr>
<td>ios::ate</td>
<td>初始位置：文件尾</td>
</tr>
<tr>
<td>ios::app</td>
<td>追加方式写文件</td>
</tr>
<tr>
<td>ios::trunc</td>
<td>如果文件存在先删除，再创建</td>
</tr>
<tr>
<td>ios::binary</td>
<td>二进制方式</td>
</tr>
</tbody></table>
<p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p>
<p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::out);</span><br><span class="line"></span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;姓名：张三&quot;</span> &lt;&lt; endl;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;性别：男&quot;</span> &lt;&lt; endl;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;年龄：18&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>文件操作必须包含头文件 fstream</li>
<li>读文件可以利用 ofstream  ，或者fstream类</li>
<li>打开文件时候需要指定操作文件的路径，以及打开方式</li>
<li>利用&lt;&lt;可以向文件中写数据</li>
<li>操作完毕，要关闭文件</li>
</ul>
<h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p>
<p>读文件步骤如下：</p>
<ol>
<li><p>包含头文件   </p>
<p>  #include &lt;fstream&gt;</p>
</li>
<li><p>创建流对象  </p>
<p>ifstream ifs;</p>
</li>
<li><p>打开文件并判断文件是否打开成功</p>
<p>ifs.open(“文件路径”,打开方式);</p>
</li>
<li><p>读数据</p>
<p>四种方式读取</p>
</li>
<li><p>关闭文件</p>
<p>ifs.close();</p>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::in);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//第一种方式</span></span><br><span class="line">	<span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">	<span class="comment">//while (ifs &gt;&gt; buf)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第二种</span></span><br><span class="line">	<span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">	<span class="comment">//while (ifs.getline(buf,sizeof(buf)))</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第三种</span></span><br><span class="line">	<span class="comment">//string buf;</span></span><br><span class="line">	<span class="comment">//while (getline(ifs, buf))</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="keyword">while</span> ((c = ifs.<span class="built_in">get</span>()) != EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; c;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>读文件可以利用 ifstream  ，或者fstream类</li>
<li>利用is_open函数可以判断文件是否打开成功</li>
<li>close 关闭文件 </li>
</ul>
<h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p>
<p>打开方式要指定为 ==ios::binary==</p>
<h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p>
<p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制文件  写文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//1、包含头文件</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、创建输出流对象</span></span><br><span class="line">	<span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3、打开文件</span></span><br><span class="line">	<span class="comment">//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);</span></span><br><span class="line"></span><br><span class="line">	Person p = &#123;<span class="string">&quot;张三&quot;</span>  , <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4、写文件</span></span><br><span class="line">	ofs.<span class="built_in">write</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;p, <span class="built_in"><span class="keyword">sizeof</span></span>(p));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//5、关闭文件</span></span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>文件输出流对象 可以通过write函数，以二进制方式写数据</li>
</ul>
<h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p>
<p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p>
<p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line">	<span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::in | ios::binary)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Person p;</span><br><span class="line">	ifs.<span class="built_in">read</span>((<span class="keyword">char</span> *)&amp;p, <span class="built_in"><span class="keyword">sizeof</span></span>(p));</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>文件输入流对象 可以通过read函数，以二进制方式读数据</li>
</ul>
<p>[<a href="https://www.bilibili.com/video/BV1et411b73Z?p=123%5D">https://www.bilibili.com/video/BV1et411b73Z?p=123]</a>: </p>
<p>出自上面链接的，在学习时可以用到</p>
]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>一元线性回归</title>
    <url>/2022/01/18/%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<p>作业</p>
<span id="more"></span>

<h2 id="作业1："><a href="#作业1：" class="headerlink" title="作业1："></a>作业1：</h2><p>通过分析披萨的直径与价格的线性关系，来预测任一直径的披萨的价格。</p>
<h3 id="1-最小二乘法："><a href="#1-最小二乘法：" class="headerlink" title="1.最小二乘法："></a>1.最小二乘法：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过分析披萨的直径与价格的线性关系，来预测任一直径的披萨的价格。</span></span><br><span class="line"><span class="comment">#最小二乘法</span></span><br><span class="line"><span class="comment"># author gyh</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">X=[<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">18</span>]<span class="comment">#x代表pizza的直径</span></span><br><span class="line">Y=[<span class="number">7</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">17.5</span>,<span class="number">18</span>]<span class="comment">#代表pizza的价格</span></span><br><span class="line">sum1,sum2=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X)):</span><br><span class="line">    sum1 +=X[i]</span><br><span class="line">t1=sum1/<span class="built_in">len</span>(X)<span class="comment">#x求平均</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;直径的平均值为:&quot;</span>,t1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y)):</span><br><span class="line">    sum2 +=Y[i]</span><br><span class="line">t2=sum2/<span class="built_in">len</span>(Y)<span class="comment">#y求平均</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;价格的平均值为:&quot;</span>,t2)</span><br><span class="line">lxx=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X)):</span><br><span class="line">    lxx +=(X[i]-t1)*(X[i]-t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lxx= &quot;</span>,lxx)</span><br><span class="line">lxy=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Y)):</span><br><span class="line">    lxy +=(X[i]-t1)*(Y[i]-t2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lxy= %.2f&quot;</span>%lxy)</span><br><span class="line"><span class="comment">#由最小二乘法b=Lxy/lxx得</span></span><br><span class="line">b=lxy/lxx</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一元线性方程的斜率b=%.2f&quot;</span>%b)</span><br><span class="line">a=t2-b*t1</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一元线性回归方程&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y=%.2f+&quot;</span>%a,<span class="string">&#x27;%.2fx&#x27;</span>%b)</span><br><span class="line"><span class="comment">####python画图</span></span><br><span class="line"></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runplt</span>():</span></span><br><span class="line">    plt.figure()<span class="comment">#自定义图像</span></span><br><span class="line">    plt.title(<span class="string">&quot;Diameter and price&quot;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;Diameter/inch&quot;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;Cost/dollar&quot;</span>)</span><br><span class="line">    plt.axis([<span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">30</span>])<span class="comment">#用来设置图像边框X到25，y到30</span></span><br><span class="line">    plt.grid(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> plt</span><br><span class="line">plt = runplt()</span><br><span class="line">plt.plot(X, Y, <span class="string">&#x27;k.&#x27;</span>)<span class="comment">#绘制点图，‘k，’的作用是画出点</span></span><br><span class="line">x = np.arange(<span class="number">6</span>, <span class="number">18</span>, <span class="number">0.001</span>)  <span class="comment"># 起点为1，终点为2.5，步长为0.01</span></span><br><span class="line">y=b*x+a</span><br><span class="line">plt.plot(x,y,label=<span class="string">&quot;最小二乘法&quot;</span>,color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.plot(X,Y,<span class="string">&#x27;bo&#x27;</span>,label=<span class="string">&quot;数据&quot;</span>,color=<span class="string">&#x27;black&#x27;</span>)<span class="comment">#加个bo可以画出点的数据</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()<span class="comment">#用来显示图像</span></span><br></pre></td></tr></table></figure>

<h3 id="2-批量梯度下降："><a href="#2-批量梯度下降：" class="headerlink" title="2.批量梯度下降："></a>2.批量梯度下降：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过分析披萨的直径与价格的线性关系，来预测任一直径的披萨的价格。</span></span><br><span class="line"><span class="comment"># author gyh</span></span><br><span class="line"><span class="comment"># 一元线性回归</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> <span class="built_in">pow</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> uniform</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">x=[<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">18</span>]<span class="comment">#x代表pizza的直径</span></span><br><span class="line">y=[<span class="number">7</span>,<span class="number">9</span>,<span class="number">13</span>,<span class="number">17.5</span>,<span class="number">18</span>]<span class="comment">#代表pizza的价格</span></span><br><span class="line"><span class="comment"># 线性回归函数为 y=theta0+theta1*x</span></span><br><span class="line"><span class="comment"># 参数定义</span></span><br><span class="line">theta0 = <span class="number">0.15</span>  <span class="comment"># 对 theata0 赋值</span></span><br><span class="line">theta1 = <span class="number">0.20</span>  <span class="comment"># 对 theata1 赋值</span></span><br><span class="line">alpha = <span class="number">0.014</span><span class="comment"># 学习率</span></span><br><span class="line">m = <span class="built_in">len</span>(x)</span><br><span class="line">count0 = <span class="number">0</span></span><br><span class="line">theta0_list = []</span><br><span class="line">theta1_list = []</span><br><span class="line"><span class="comment"># 使用批量梯度下降法</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):<span class="comment">#控制迭代次数</span></span><br><span class="line">    count0 += <span class="number">1</span></span><br><span class="line">    diss = <span class="number">0</span>  <span class="comment"># 误差</span></span><br><span class="line">    deriv0 = <span class="number">0</span>  <span class="comment"># 对 theata0 导数</span></span><br><span class="line">    deriv1 = <span class="number">0</span>  <span class="comment"># 对 theata1 导数</span></span><br><span class="line">    <span class="comment"># 求导</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        deriv0 += (theta0 + theta1 * x[i] - y[i]) / m</span><br><span class="line">        deriv1 += ((theta0 + theta1 * x[i] - y[i]) / m) * x[i]</span><br><span class="line">    <span class="comment"># 更新 theta0 和 theta1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        theta0 = theta0 - alpha * ((theta0 + theta1 * x[i] - y[i]) / m)</span><br><span class="line">        theta1 = theta1 - alpha * ((theta0 + theta1 * x[i] - y[i]) / m) * x[i]</span><br><span class="line">    <span class="comment"># 求损失函数 J (θ)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        diss = diss + (<span class="number">1</span> / (<span class="number">2</span> * m)) * <span class="built_in">pow</span>((theta0 + theta1 * x[i] - y[i]), <span class="number">2</span>)</span><br><span class="line">    theta0_list.append(theta0 * <span class="number">100</span>)</span><br><span class="line">    theta1_list.append(theta1)</span><br><span class="line">    <span class="comment"># 如果误差已经很小，则退出循环</span></span><br><span class="line">    <span class="keyword">if</span> diss &lt;= <span class="number">10000</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;批量梯度下降最终得到theta0=&#123;&#125;，theta1=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(theta0,theta1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;得到的回归函数是：y=&#123;&#125;+&#123;&#125;*x&quot;</span>.<span class="built_in">format</span>(theta0,theta1))</span><br><span class="line"><span class="comment">#画出函数图像</span></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;bo&#x27;</span>,label=<span class="string">&#x27;数据&#x27;</span>,color=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">plt.plot(x,[theta0+theta1*x <span class="keyword">for</span> x <span class="keyword">in</span> x],label=<span class="string">&#x27;批量梯度下降&#x27;</span>,color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;直径&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;价格&#x27;</span>)</span><br><span class="line">plt.legend()<span class="comment">#显示图像内容</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="作业2："><a href="#作业2：" class="headerlink" title="作业2："></a>作业2：</h2><p>预测房价</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#房价面积与价格的数据</span></span><br><span class="line">x0 = [<span class="number">150</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">300</span>, <span class="number">350</span>, <span class="number">400</span>, <span class="number">600</span>]</span><br><span class="line">y0 = [<span class="number">6450</span>, <span class="number">7450</span>, <span class="number">8450</span>, <span class="number">9450</span>, <span class="number">11450</span>, <span class="number">15450</span>, <span class="number">18450</span>]</span><br></pre></td></tr></table></figure>

<h3 id="1-批量梯度下降："><a href="#1-批量梯度下降：" class="headerlink" title="1.批量梯度下降："></a>1.批量梯度下降：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过分析房子价格与面积的线性关系，来预测房子的价格。</span></span><br><span class="line"><span class="comment"># author gyh</span></span><br><span class="line"><span class="comment">#一元线性回归y=k*x+b</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> <span class="built_in">pow</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> uniform</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">x0 = [<span class="number">150</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">300</span>, <span class="number">350</span>, <span class="number">400</span>, <span class="number">600</span>]</span><br><span class="line">y0 = [<span class="number">6450</span>, <span class="number">7450</span>, <span class="number">8450</span>, <span class="number">9450</span>, <span class="number">11450</span>, <span class="number">15450</span>, <span class="number">18450</span>]</span><br><span class="line"><span class="comment"># 为了方便计算，将所有数据缩小 100 倍</span></span><br><span class="line">x = [<span class="number">1.50</span>, <span class="number">2.00</span>, <span class="number">2.50</span>, <span class="number">3.00</span>, <span class="number">3.50</span>, <span class="number">4.00</span>, <span class="number">6.00</span>]</span><br><span class="line">y = [<span class="number">64.50</span>, <span class="number">74.50</span>, <span class="number">84.50</span>, <span class="number">94.50</span>, <span class="number">114.50</span>, <span class="number">154.50</span>, <span class="number">184.50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性回归函数为 y=theta0+theta1*x</span></span><br><span class="line"><span class="comment"># 参数定义</span></span><br><span class="line">theta0 = <span class="number">0.1</span>  <span class="comment"># 对 theata0 赋值</span></span><br><span class="line">theta1 = <span class="number">0.1</span>  <span class="comment"># 对 theata1 赋值</span></span><br><span class="line">alpha = <span class="number">0.1</span>  <span class="comment"># 学习率</span></span><br><span class="line">m = <span class="built_in">len</span>(x)</span><br><span class="line">count0 = <span class="number">0</span></span><br><span class="line">theta0_list = []</span><br><span class="line">theta1_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用批量梯度下降法</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):<span class="comment">#控制迭代次数</span></span><br><span class="line">    count0 += <span class="number">1</span></span><br><span class="line">    diss = <span class="number">0</span>  <span class="comment"># 误差</span></span><br><span class="line">    deriv0 = <span class="number">0</span>  <span class="comment"># 对 theata0 导数</span></span><br><span class="line">    deriv1 = <span class="number">0</span>  <span class="comment"># 对 theata1 导数</span></span><br><span class="line">    <span class="comment"># 求导</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        deriv0 += (theta0 + theta1 * x[i] - y[i]) / m</span><br><span class="line">        deriv1 += ((theta0 + theta1 * x[i] - y[i]) / m) * x[i]</span><br><span class="line">    <span class="comment"># 更新 theta0 和 theta1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        theta0 = theta0 - alpha * ((theta0 + theta1 * x[i] - y[i]) / m)</span><br><span class="line">        theta1 = theta1 - alpha * ((theta0 + theta1 * x[i] - y[i]) / m) * x[i]</span><br><span class="line">    <span class="comment"># 求损失函数 J (θ)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        diss = diss + (<span class="number">1</span> / (<span class="number">2</span> * m)) * <span class="built_in">pow</span>((theta0 + theta1 * x[i] - y[i]), <span class="number">2</span>)</span><br><span class="line">    theta0_list.append(theta0 * <span class="number">100</span>)</span><br><span class="line">    theta1_list.append(theta1)</span><br><span class="line">    <span class="comment"># 如果误差已经很小，则退出循环</span></span><br><span class="line">    <span class="keyword">if</span> diss &lt;= <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">theta0 = theta0 * <span class="number">100</span>  <span class="comment"># 前面所有数据缩小了 100 倍，所以求出的 theta0 需要放大 100 倍，theta1 不用变</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;批量梯度下降最终得到theta0=&#123;&#125;，theta1=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(theta0,theta1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;得到的回归函数是：y=&#123;&#125;+&#123;&#125;*x&quot;</span>.<span class="built_in">format</span>(theta0,theta1))</span><br><span class="line"><span class="comment">#画出函数图像</span></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.plot(x0,y0,<span class="string">&#x27;bo&#x27;</span>,label=<span class="string">&#x27;数据&#x27;</span>,color=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">plt.plot(x0,[theta0+theta1*x <span class="keyword">for</span> x <span class="keyword">in</span> x0],label=<span class="string">&#x27;批量梯度下降&#x27;</span>,color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x（面积）&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y（价格）&#x27;</span>)</span><br><span class="line">plt.legend()<span class="comment">#显示图像内容</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h3 id="2-最小二乘法："><a href="#2-最小二乘法：" class="headerlink" title="2.最小二乘法："></a>2.最小二乘法：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#预测房价</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> <span class="built_in">pow</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> uniform</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#数据</span></span><br><span class="line">x0 = [<span class="number">150</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">300</span>, <span class="number">350</span>, <span class="number">400</span>, <span class="number">600</span>]</span><br><span class="line">y0 = [<span class="number">6450</span>, <span class="number">7450</span>, <span class="number">8450</span>, <span class="number">9450</span>, <span class="number">11450</span>, <span class="number">15450</span>, <span class="number">18450</span>]</span><br><span class="line"><span class="comment"># 为了方便计算，将所有数据缩小 100 倍</span></span><br><span class="line">x = [<span class="number">1.50</span>, <span class="number">2.00</span>, <span class="number">2.50</span>, <span class="number">3.00</span>, <span class="number">3.50</span>, <span class="number">4.00</span>, <span class="number">6.00</span>]</span><br><span class="line">y = [<span class="number">64.50</span>, <span class="number">74.50</span>, <span class="number">84.50</span>, <span class="number">94.50</span>, <span class="number">114.50</span>, <span class="number">154.50</span>, <span class="number">184.50</span>]</span><br><span class="line">sum1=<span class="number">0</span></span><br><span class="line">sum2=<span class="number">0</span></span><br><span class="line">m=<span class="built_in">len</span>(x)</span><br><span class="line"><span class="comment">#对x求平均</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    sum1 +=x[i]</span><br><span class="line">av_1=sum1/m</span><br><span class="line"><span class="comment">#对y求平均</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    sum2 +=y[i]</span><br><span class="line">av_2=sum2/m</span><br><span class="line"><span class="comment">#求lxx和lxy</span></span><br><span class="line">lxx=<span class="number">0</span></span><br><span class="line">lxy=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    lxx +=(x[i]-av_1)*(x[i]-av_1)</span><br><span class="line">    lxy +=(x[i]-av_1)*(y[i]-av_2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;lxx= &quot;</span>,lxx,<span class="string">&quot;lxy= &quot;</span>,lxy)</span><br><span class="line"><span class="comment">#由最小二乘法得到</span></span><br><span class="line">k=lxy/lxx</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;线性回归方程的k= &quot;</span>,k)</span><br><span class="line">b=av_2*<span class="number">100</span>-av_1*<span class="number">100</span>*k</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;一元线性回归方程&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;y=%.2f+&quot;</span>%b,<span class="string">&#x27;%.2fx&#x27;</span>%k)</span><br><span class="line"><span class="comment">#画图</span></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.figure()<span class="comment">#自定义图像</span></span><br><span class="line">plt.title(<span class="string">&quot;S and price&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;S&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">700</span>, <span class="number">0</span>, <span class="number">20000</span>])<span class="comment">#用来设置图像边框X到25，y到30</span></span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">x = np.arange(<span class="number">60</span>,<span class="number">600</span>)  <span class="comment"># 起点为1，终点为2.5，步长为0.01</span></span><br><span class="line">y=k*x+b</span><br><span class="line">plt.plot(x,y,label=<span class="string">&quot;最小二乘法&quot;</span>,color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.plot(x0,y0,<span class="string">&#x27;bo&#x27;</span>,label=<span class="string">&quot;数据&quot;</span>,color=<span class="string">&#x27;black&#x27;</span>)<span class="comment">#加个bo可以画出点的数据</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()<span class="comment">#用来显示图像</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>matplotlib</title>
    <url>/2022/01/18/matplotlib/</url>
    <content><![CDATA[<p>matplotlib</p>
<span id="more"></span>
<h2 id="学习matplotlib目的"><a href="#学习matplotlib目的" class="headerlink" title="学习matplotlib目的:"></a>学习matplotlib目的:</h2><p>​      1.可以使数据进行可视化，更直观的的呈现</p>
<p>​      2.使数据更加客观、更具说服力</p>
<h2 id="matplotlib概念："><a href="#matplotlib概念：" class="headerlink" title="matplotlib概念："></a>matplotlib概念：</h2><p>​      最流行的Python底层绘图库，主要做数据可视化图表,名字取材于MATLAB，模仿MATLAB构建</p>
<h2 id="matplotlib学习"><a href="#matplotlib学习" class="headerlink" title="matplotlib学习:"></a>matplotlib学习:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#引入matplotlib</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.设置图片大小</span></span><br><span class="line">fig=plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">80</span>)</span><br><span class="line"><span class="comment">#figure在这里指我们所画的图</span></span><br><span class="line"><span class="comment">#dpi可以通过参数控制图像的清晰度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.绘制x刻度和y刻度</span></span><br><span class="line">plt.xticks(x)<span class="comment">#绘制x刻度</span></span><br><span class="line">plt.yticks(y)<span class="comment">#绘制y刻度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.给图像添加描绘信息</span></span><br><span class="line">plt.title(<span class="string">&quot;Change&quot;</span>)<span class="comment">#添加标题名称</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;time&quot;</span>)<span class="comment">#添加x轴坐标名称</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;T&quot;</span>)<span class="comment">#添加y轴坐标名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.改变不同的绘图风格</span></span><br><span class="line">plt.(x,y,color=<span class="string">&#x27;r&#x27;</span>,linestyle=<span class="string">&#x27;--&#x27;</span>,linewidth=<span class="number">5</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment">#color代表线条的颜色,linestyle代表线条的形式,linewidth代表线条的粗细,alpha代表透明度</span></span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\HP1\AppData\Roaming\Typora\typora-user-images\image-20220118104002117.png" alt="image-20220118104002117"></p>
<p>如果画两条折线图的话，那么如何可以更快的区分哪一条：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#plt.legend()函数的几种用法</span></span><br><span class="line"><span class="comment">#(1)设置图列位置</span></span><br><span class="line">plt.legend(lox=<span class="string">&quot;best&quot;</span>)<span class="comment">#默认右上角</span></span><br><span class="line"><span class="comment">#(2))设置图例边框及背景</span></span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>,frameon=<span class="literal">False</span>) <span class="comment">#去掉图例边框</span></span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>,edgecolor=<span class="string">&#x27;blue&#x27;</span>) <span class="comment">#设置图例边框颜色</span></span><br><span class="line">plt.legend(loc=<span class="string">&#x27;best&#x27;</span>,facecolor=<span class="string">&#x27;blue&#x27;</span>) <span class="comment">#设置图例背景颜色,若无边框,参数无效</span></span><br></pre></td></tr></table></figure>

<p>这是一些参考数据</p>
<p>​     假设大家在30岁的时候,根据自己的实际情况,统计出来了从11岁到30岁每年交的女(男)朋友的数量如列表a,请绘制出该数据的折线图,以便分析自己每年交女(男)朋友的数量走势<br>​    a = [1,0,1,1,2,4,3,2,3,4,4,5,6,5,4,3,3,1,1,1]                                                    b = [1,0,3,1,2,2,3,3,2,1 ,2,1,1,1,1,1,1,1,1,1]<br>要求:<br>​    y轴表示个数<br>​    x轴表示岁数,比如11岁,12岁等</p>
<h3 id="matplotlib绘制折线图："><a href="#matplotlib绘制折线图：" class="headerlink" title="matplotlib绘制折线图："></a>matplotlib绘制折线图：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Author:gyh</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line">age=np.arange(<span class="number">11</span>,<span class="number">31</span>)<span class="comment">#表示从11岁到30岁</span></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]<span class="comment">#表示自己每年交到的对象</span></span><br><span class="line">b=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]<span class="comment">#表示自己同桌交到的对象</span></span><br><span class="line"><span class="comment">#y轴表示个数，x轴表示岁数</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;num&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;friends&quot;</span>)</span><br><span class="line">plt.xticks(age)</span><br><span class="line">plt.yticks(a)</span><br><span class="line">plt.plot(age,a,label=<span class="string">&quot;自己&quot;</span>,color=<span class="string">&#x27;r&#x27;</span>,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">plt.plot(age,b,label=<span class="string">&quot;同桌&quot;</span>,color=<span class="string">&#x27;y&#x27;</span>,linestyle=<span class="string">&#x27;-&#x27;</span>)<span class="comment">#改变颜色，进行曲线说明</span></span><br><span class="line"><span class="comment">#通过label显示图例内容</span></span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line"><span class="comment">#通过loc指定图例的位置，默认右上角</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>图像：</p>
<p><img src="C:\Users\HP1\AppData\Roaming\Typora\typora-user-images\image-20220118111226355.png" alt="image-20220118111226355"></p>
<h3 id="matplotlib绘制散点图："><a href="#matplotlib绘制散点图：" class="headerlink" title="matplotlib绘制散点图："></a>matplotlib绘制散点图：</h3>]]></content>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>梯度下降</title>
    <url>/2022/01/17/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</url>
    <content><![CDATA[<p>作业</p>
<span id="more"></span>

<h2 id="单变量："><a href="#单变量：" class="headerlink" title="单变量："></a>单变量：</h2><p>$$<br>对1/2x^2-2x+3进行求解<br>$$</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#函数：y=(1/2)*x^2-2x+3</span></span><br><span class="line"><span class="comment">#time: 2022/1/16</span></span><br><span class="line"><span class="comment">#Author Gyh</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">result=<span class="built_in">list</span>()</span><br><span class="line"><span class="comment">#原函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>/<span class="number">2</span>)*x*x-<span class="number">2</span>*x+<span class="number">3</span></span><br><span class="line"><span class="comment">#导函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Gd</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x-<span class="number">2</span></span><br><span class="line"><span class="comment">#迭代函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Grad</span>(<span class="params">x,alpha,mins,time</span>):</span></span><br><span class="line">    result.append(x)<span class="comment">#将初始x值添加数组中</span></span><br><span class="line">    next_x = x - alpha * Gd(x)</span><br><span class="line">    next_y=h(next_x)</span><br><span class="line">    cnt=<span class="number">1</span></span><br><span class="line">    judge=<span class="built_in">abs</span>(next_x-x)</span><br><span class="line">    x_axis = np.linspace(-<span class="number">10</span>, <span class="number">10</span>) <span class="comment">#设定x轴的坐标系</span></span><br><span class="line">    fig = plt.figure(<span class="number">1</span>,figsize=(<span class="number">5</span>,<span class="number">5</span>)) <span class="comment">#设定画布大小</span></span><br><span class="line">    ax = fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="comment">#设定画布内只有一个图</span></span><br><span class="line">    ax.set_xlabel(<span class="string">&#x27;X&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">    ax.set_ylabel(<span class="string">&#x27;Y&#x27;</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">    ax.plot(x_axis,h(x_axis)) <span class="comment">#作图</span></span><br><span class="line">    <span class="keyword">while</span> judge&gt;mins <span class="keyword">and</span> cnt&lt;time:</span><br><span class="line">        x=next_x</span><br><span class="line">        y=next_y</span><br><span class="line">        result.append(x)</span><br><span class="line">        next_x = x - alpha * Gd(x)</span><br><span class="line">        next_y=h(next_x)</span><br><span class="line">        judge=<span class="built_in">abs</span>(next_x-x)</span><br><span class="line">        cnt +=<span class="number">1</span></span><br><span class="line">        ax.plot([x, next_x], [y, next_y], <span class="string">&#x27;ko&#x27;</span>, lw=<span class="number">1</span>, ls=<span class="string">&#x27;-&#x27;</span>, color=<span class="string">&#x27;coral&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;迭代得到的最小值: &quot;</span>,Grad(<span class="number">10</span>,<span class="number">0.1</span>,<span class="number">0.00001</span>,<span class="number">100</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):  <span class="comment">#输出每一次的迭代值</span></span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;x的初始值为：&quot;</span>,result[i])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>,i,<span class="string">&quot;次迭代: &quot;</span>,<span class="string">&quot;x= &quot;</span>,result[i])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="部分结果："><a href="#部分结果：" class="headerlink" title="部分结果："></a>部分结果：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">迭代得到的最小值:  <span class="number">2.0002361013234453</span></span><br><span class="line">x的初始值为： <span class="number">10</span></span><br><span class="line">第 <span class="number">1</span> 次迭代:  x=  <span class="number">9.2</span></span><br><span class="line">第 <span class="number">2</span> 次迭代:  x=  <span class="number">8.479999999999999</span></span><br><span class="line">第 <span class="number">3</span> 次迭代:  x=  <span class="number">7.831999999999999</span></span><br><span class="line">第 <span class="number">4</span> 次迭代:  x=  <span class="number">7.248799999999999</span></span><br><span class="line">第 <span class="number">5</span> 次迭代:  x=  <span class="number">6.72392</span></span><br><span class="line">第 <span class="number">6</span> 次迭代:  x=  <span class="number">6.2515279999999995</span></span><br><span class="line">第 <span class="number">7</span> 次迭代:  x=  <span class="number">5.826375199999999</span></span><br><span class="line">第 <span class="number">8</span> 次迭代:  x=  <span class="number">5.443737679999999</span></span><br><span class="line">第 <span class="number">9</span> 次迭代:  x=  <span class="number">5.099363911999999</span></span><br><span class="line">第 <span class="number">10</span> 次迭代:  x=  <span class="number">4.7894275207999994</span></span><br><span class="line">第 <span class="number">11</span> 次迭代:  x=  <span class="number">4.51048476872</span></span><br><span class="line">第 <span class="number">12</span> 次迭代:  x=  <span class="number">4.259436291848</span></span><br><span class="line">第 <span class="number">13</span> 次迭代:  x=  <span class="number">4.0334926626632</span></span><br><span class="line">第 <span class="number">14</span> 次迭代:  x=  <span class="number">3.83014339639688</span></span><br><span class="line">第 <span class="number">15</span> 次迭代:  x=  <span class="number">3.647129056757192</span></span><br><span class="line">第 <span class="number">16</span> 次迭代:  x=  <span class="number">3.482416151081473</span></span><br><span class="line">第 <span class="number">17</span> 次迭代:  x=  <span class="number">3.3341745359733257</span></span><br><span class="line">第 <span class="number">18</span> 次迭代:  x=  <span class="number">3.200757082375993</span></span><br><span class="line">第 <span class="number">19</span> 次迭代:  x=  <span class="number">3.080681374138394</span></span><br><span class="line">第 <span class="number">20</span> 次迭代:  x=  <span class="number">2.9726132367245546</span></span><br><span class="line">第 <span class="number">21</span> 次迭代:  x=  <span class="number">2.875351913052099</span></span><br><span class="line">第 <span class="number">22</span> 次迭代:  x=  <span class="number">2.787816721746889</span></span><br><span class="line">第 <span class="number">23</span> 次迭代:  x=  <span class="number">2.7090350495722</span></span><br><span class="line">第 <span class="number">24</span> 次迭代:  x=  <span class="number">2.6381315446149802</span></span><br><span class="line">第 <span class="number">25</span> 次迭代:  x=  <span class="number">2.5743183901534823</span></span><br><span class="line">第 <span class="number">26</span> 次迭代:  x=  <span class="number">2.516886551138134</span></span><br><span class="line">第 <span class="number">27</span> 次迭代:  x=  <span class="number">2.465197896024321</span></span><br><span class="line">第 <span class="number">28</span> 次迭代:  x=  <span class="number">2.418678106421889</span></span><br><span class="line">第 <span class="number">29</span> 次迭代:  x=  <span class="number">2.3768102957797</span></span><br><span class="line">第 <span class="number">30</span> 次迭代:  x=  <span class="number">2.3391292662017302</span></span><br></pre></td></tr></table></figure>



<h2 id="多变量："><a href="#多变量：" class="headerlink" title="多变量："></a>多变量：</h2><p>$$<br>对z=(x-10)^2+(y-10)^2进行求解<br>$$</p>
<h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#z=(x-10)**2+(y-10)**2</span></span><br><span class="line"><span class="comment">#time:2022/1/17</span></span><br><span class="line"><span class="comment">#Author:gyh</span></span><br><span class="line"><span class="comment">#原函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (x-<span class="number">10</span>)**<span class="number">2</span>+(y-<span class="number">10</span>)**<span class="number">2</span></span><br><span class="line"><span class="comment">#对x求导函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Gd1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*(x-<span class="number">10</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Gd2</span>(<span class="params">y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*(y-<span class="number">10</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Grads</span>():</span></span><br><span class="line">    x=<span class="number">15</span><span class="comment">#x的默认值</span></span><br><span class="line">    y=<span class="number">15</span><span class="comment">#y的默认值</span></span><br><span class="line">    alpha=<span class="number">0.01</span><span class="comment">#步长</span></span><br><span class="line">    time=<span class="number">1000</span><span class="comment">#跌打次数</span></span><br><span class="line">    cnt=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,time):</span><br><span class="line">        next_x=x</span><br><span class="line">        next_y=y</span><br><span class="line">        z=h(next_x,next_y)</span><br><span class="line">        x=next_x-alpha*Gd1(next_x)</span><br><span class="line">        y=next_y-alpha*Gd2(next_y)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&quot;</span>,i,<span class="string">&quot;次迭代的&quot;</span>,<span class="string">&quot;x=&quot;</span>,next_x,<span class="string">&quot;y=&quot;</span>,next_y)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Grads()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于结果代码较长在此省略</p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy</title>
    <url>/2022/01/17/numpy%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>numpy</p>
<span id="more"></span>

<h2 id="1-numpy生成数组："><a href="#1-numpy生成数组：" class="headerlink" title="1.numpy生成数组："></a>1.numpy生成数组：</h2><p>生成一维数组有几种方法：</p>
<p>1：t=np.array([x1,x2,x3,…..  ])在里面填入你的数据即可</p>
<p>2：t=np.array(range(x))可以生成一个从0到x-1的数组</p>
<p>3：t3=np.arange(10)#可设置初始位置和步长</p>
<h3 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#time 2022/1/7</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#使用numpy生成数组</span></span><br><span class="line"><span class="comment"># t1=np.array([1,2,3,5])</span></span><br><span class="line">t1=np.array([<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">18</span>])</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;t1[1]的值&quot;</span>,t1[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原数组为&quot;</span>,t1)</span><br><span class="line"> </span><br><span class="line">t2=np.array(<span class="built_in">range</span>(<span class="number">10</span>))<span class="comment">#生成一个从0到10的数组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;新生成的数组t2&quot;</span>,t2)</span><br><span class="line"> </span><br><span class="line">t3=np.arange(<span class="number">10</span>)<span class="comment">#可设置初始位置和步长</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;新生成的数组t3&quot;</span>,t3)</span><br><span class="line"><span class="built_in">print</span>(t3)</span><br></pre></td></tr></table></figure>

<p>创建多维数组的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">b = np.array([np.arange(<span class="number">6</span>),np.arange(<span class="number">6</span>)])</span><br></pre></td></tr></table></figure>

<p>这里，我们使用两个<code>arange</code>方法，创建了两个<code>1x6</code>的一维数组，然后使用<code>numpy</code>的<code>array</code>方法，将两个一维数组组合成一个<code>2x6</code>的二维数组。从而达到了创建多维数组的目的。</p>
<p><code>numpy</code>创建的数组可以直接复制，具体代码示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = [y <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line">b=np.array([x]*<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>这样就生成了一个4*6的多维数组</p>
<h3 id="运行结果代码："><a href="#运行结果代码：" class="headerlink" title="运行结果代码："></a>运行结果代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1[<span class="number">1</span>]的值 <span class="number">8</span></span><br><span class="line">原数组为 [ <span class="number">6</span>  <span class="number">8</span> <span class="number">10</span> <span class="number">14</span> <span class="number">18</span>]</span><br><span class="line">新生成的数组t2 [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">新生成的数组t3 [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<h2 id="2-numpy中的转置："><a href="#2-numpy中的转置：" class="headerlink" title="2.numpy中的转置："></a>2.numpy中的转置：</h2><p>转置是一种变换，对于numpy中的数组来说，就是在对角线方向交换数据，其目的是为了更方便的处理数据。</p>
<p>三种转置方法，用到了三个函数：t.transpose()  t.swapaxes(1,0) 和t.T，个人认为t.T比较简便</p>
<h3 id="代码演示：-1"><a href="#代码演示：-1" class="headerlink" title="代码演示："></a>代码演示：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">t=np.array([[<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>],</span><br><span class="line">            [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>],</span><br><span class="line">            [<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"><span class="comment">#第一种</span></span><br><span class="line"><span class="comment">#对矩阵t进行转置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一种转置后的矩阵&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.transpose())</span><br><span class="line"><span class="comment">#第二种</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第二种转置后的矩阵&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.swapaxes(<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line"><span class="comment">#第三种</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第三种转置后的矩阵&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t.T)</span><br></pre></td></tr></table></figure>

<h3 id="运行结果代码：-1"><a href="#运行结果代码：-1" class="headerlink" title="运行结果代码："></a>运行结果代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">第一种转置后的矩阵</span><br><span class="line">[[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">1</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">第二种转置后的矩阵</span><br><span class="line">[[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">1</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]]</span><br><span class="line">第三种转置后的矩阵</span><br><span class="line">[[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">1</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="3-numpy中的索引和切片"><a href="#3-numpy中的索引和切片" class="headerlink" title="3.numpy中的索引和切片:"></a>3.numpy中的索引和切片:</h2><p>我们可以对numpy数组中的元素取行，取列，取多行，取多列</p>
<h3 id="代码演示：-2"><a href="#代码演示：-2" class="headerlink" title="代码演示："></a>代码演示：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">            [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],</span><br><span class="line">            [<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]])</span><br><span class="line"><span class="comment">#原矩阵元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原有矩阵&quot;</span>,a)</span><br><span class="line"><span class="comment">#取矩阵中的一行元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;取矩阵中一行元素&quot;</span>,a[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#取矩阵中的一一列元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;取矩阵中一列元素&quot;</span>,a[:,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#取矩阵中的多行元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;取矩阵中的多行元素&quot;</span>,a[<span class="number">0</span>:<span class="number">1</span>])<span class="comment">#最后一行是不包括1的</span></span><br><span class="line"><span class="comment">#取多列元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;取矩阵中的多列元素&quot;</span>,a[<span class="number">0</span>:,<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<p>一维<code>Numpy</code>数组的切片操作与<code>Python</code>列表的切片一样。下面首先来定义数字<code>0 1 2</code>直到<code>8</code>的数组，然后通过指定下标<code>3</code>到<code>7</code>来选择数组的部分元素，这实际上就是提取数组中值为<code>3</code>到<code>6</code>的元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">In: a = np.arange(<span class="number">9</span>)</span><br><span class="line">In: a[<span class="number">3</span>:<span class="number">7</span>]</span><br><span class="line">Out: array([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br></pre></td></tr></table></figure>

<p>同时用下标选择元素，下标范围从<code>0</code>到<code>7</code>，并且下标每次递增<code>2</code>，如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In: a[:<span class="number">7</span>:<span class="number">2</span>]</span><br><span class="line">Out:array([<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>])</span><br></pre></td></tr></table></figure>

<p>也可以像<code>Python</code>数组一样，用负值下标来反转数组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In: a[::-<span class="number">1</span>]</span><br><span class="line">Out: array([<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<p>对于二维数组的索引，类似与<code>Python</code>数组的列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In: a=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]])</span><br><span class="line">In: a[<span class="number">1</span>][<span class="number">0</span>] </span><br><span class="line">Out:array([<span class="number">4</span>])In:a[<span class="number">1</span>,:<span class="number">2</span>]    <span class="comment">#获取第1维的前2个元素Out:array([4, 3])</span></span><br></pre></td></tr></table></figure>

<h2 id="4-numpy中的数值修改"><a href="#4-numpy中的数值修改" class="headerlink" title="4.numpy中的数值修改:"></a>4.numpy中的数值修改:</h2><p>通过操作使列和行的值变成零以及修改某个数的值</p>
<h3 id="代码演示：-3"><a href="#代码演示：-3" class="headerlink" title="代码演示："></a>代码演示：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.array([[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">            [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],</span><br><span class="line">            [<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]])</span><br><span class="line">b=np.array([[<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">            [<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>],</span><br><span class="line">            [<span class="number">3</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">11</span>]])</span><br><span class="line"> </span><br><span class="line"><span class="comment">#修改行列的值,使列变成了零</span></span><br><span class="line">a[:,<span class="number">1</span>:<span class="number">3</span>]=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#修改行的值,使行变成了零</span></span><br><span class="line">b[<span class="number">1</span>:<span class="number">3</span>:]=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#通过赋值可以修改某个数的值</span></span><br><span class="line">c=np.arange(<span class="number">24</span>).reshape((<span class="number">4</span>,<span class="number">6</span>))</span><br><span class="line">c[c==<span class="number">4</span>]=<span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<h3 id="运行结果代码：-2"><a href="#运行结果代码：-2" class="headerlink" title="运行结果代码："></a>运行结果代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">11</span>]]</span><br><span class="line">[[<span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span> <span class="number">11</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [<span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="5-numpy中的布尔索引："><a href="#5-numpy中的布尔索引：" class="headerlink" title="5.numpy中的布尔索引："></a>5.numpy中的布尔索引：</h2><p>t为一个数组，通过t&lt;x,可以使小于x的数变成True输出，大于x则为False，那么t&gt;x使相反的。</p>
<h3 id="代码演示：-4"><a href="#代码演示：-4" class="headerlink" title="代码演示："></a>代码演示：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#生成一个数组，通过reshape函数让其成为几列几行</span></span><br><span class="line">t=np.arange(<span class="number">24</span>).reshape((<span class="number">4</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;小于10为True大于10为False&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t&lt;<span class="number">10</span>)</span><br><span class="line"><span class="comment">#矩阵中小于10的数都替换成为零</span></span><br><span class="line">t[t&lt;<span class="number">10</span>]=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;矩阵中小于10的数都替换成为零&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="comment">#矩阵中大于10的数都替换成为10</span></span><br><span class="line">t[t&gt;<span class="number">10</span>]=<span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;矩阵中大于10的数都替换成为10&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure>

<h3 id="运行结果代码：-3"><a href="#运行结果代码：-3" class="headerlink" title="运行结果代码："></a>运行结果代码：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">小于<span class="number">10</span>为<span class="literal">True</span>大于<span class="number">10</span>为<span class="literal">False</span></span><br><span class="line">[[ <span class="literal">True</span>  <span class="literal">True</span>  <span class="literal">True</span>  <span class="literal">True</span>  <span class="literal">True</span>  <span class="literal">True</span>]</span><br><span class="line"> [ <span class="literal">True</span>  <span class="literal">True</span>  <span class="literal">True</span>  <span class="literal">True</span> <span class="literal">False</span> <span class="literal">False</span>]</span><br><span class="line"> [<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]</span><br><span class="line"> [<span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span> <span class="literal">False</span>]]</span><br><span class="line">矩阵中小于<span class="number">10</span>的数都替换成为零</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [<span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]]</span><br><span class="line">矩阵中大于<span class="number">10</span>的数都替换成为<span class="number">10</span></span><br><span class="line">[[ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">10</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span> <span class="number">10</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="6-numpy中三元运算符："><a href="#6-numpy中三元运算符：" class="headerlink" title="6.numpy中三元运算符："></a>6.numpy中三元运算符：</h2><p>通过np.where()函数可以调整值</p>
<h3 id="代码演示：-5"><a href="#代码演示：-5" class="headerlink" title="代码演示："></a>代码演示：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Gyh</span></span><br><span class="line"><span class="comment">#2022/1/12</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#生成一个数组，通过reshape函数让其成为几列几行</span></span><br><span class="line">t=np.arange(<span class="number">24</span>).reshape((<span class="number">4</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(np.where(t&lt;<span class="number">10</span>,<span class="number">0</span>,<span class="number">10</span>))<span class="comment">#使小于10的为0，大于10的为10</span></span><br></pre></td></tr></table></figure>

<h2 id="7-numpy中clip裁剪："><a href="#7-numpy中clip裁剪：" class="headerlink" title="7.numpy中clip裁剪："></a>7.numpy中clip裁剪：</h2><h3 id="代码演示：-6"><a href="#代码演示：-6" class="headerlink" title="代码演示："></a>代码演示：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#numpy中clip裁剪</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">t=np.array([[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">           [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>],</span><br><span class="line">           [<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>],</span><br><span class="line">           [<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>]])</span><br><span class="line"><span class="built_in">print</span>(t.clip(<span class="number">10</span>,<span class="number">18</span>))<span class="comment">#小于10的修改为10，大于18的修改为18</span></span><br></pre></td></tr></table></figure>

<h2 id="8-numpy中的基本运算："><a href="#8-numpy中的基本运算：" class="headerlink" title="8.numpy中的基本运算："></a>8.numpy中的基本运算：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = np.array([[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</span><br></pre></td></tr></table></figure>



<h5 id="向量与向量之间"><a href="#向量与向量之间" class="headerlink" title="向量与向量之间"></a>向量与向量之间</h5><h6 id="1-加法"><a href="#1-加法" class="headerlink" title="1.加法"></a>1.加法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=np.add(a,b)</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">t2=a+b</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(t2）</span><br></pre></td></tr></table></figure>

<h6 id="2-减法"><a href="#2-减法" class="headerlink" title="2.减法"></a>2.减法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=np.subtract(a,b)</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">t2=a-b</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(t2)</span><br></pre></td></tr></table></figure>

<h6 id="3-乘法（X乘）"><a href="#3-乘法（X乘）" class="headerlink" title="3.乘法（X乘）"></a>3.乘法（X乘）</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=np.multiply(a,b)</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">t2=a * b</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(t2)</span><br></pre></td></tr></table></figure>

<h6 id="4-乘法（点乘）"><a href="#4-乘法（点乘）" class="headerlink" title="4.乘法（点乘）"></a>4.乘法（点乘）</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = np.array([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">t1=np.dot(a,b) </span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line">out:array([<span class="number">32</span>,<span class="number">77</span>])</span><br></pre></td></tr></table></figure>

<h6 id="5-除法"><a href="#5-除法" class="headerlink" title="5.除法"></a>5.除法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = np.array([[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</span><br><span class="line">t1=np.divide(a,b)<span class="comment">#或</span></span><br><span class="line">t2=a/b</span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line">Out:array([[ <span class="number">0.25</span>,  <span class="number">0.4</span> ,  <span class="number">0.5</span> ],</span><br><span class="line">       [ <span class="number">4.</span>  ,  <span class="number">2.5</span> ,  <span class="number">2.</span>  ]])</span><br></pre></td></tr></table></figure>

<h5 id="向量与标量之间"><a href="#向量与标量之间" class="headerlink" title="向量与标量之间"></a>向量与标量之间</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br></pre></td></tr></table></figure>

<h6 id="1-加法-1"><a href="#1-加法-1" class="headerlink" title="1.加法"></a>1.加法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In:  a +<span class="number">1</span></span><br><span class="line">Out:array([[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],[<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]])</span><br></pre></td></tr></table></figure>

<h6 id="2-减法-1"><a href="#2-减法-1" class="headerlink" title="2.减法"></a>2.减法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In:  a -<span class="number">1</span></span><br><span class="line">Out:array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br></pre></td></tr></table></figure>

<h6 id="3-乘法"><a href="#3-乘法" class="headerlink" title="3.乘法"></a>3.乘法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In: a*<span class="number">2</span></span><br><span class="line">Out:array([[ <span class="number">2</span>,  <span class="number">4</span>,  <span class="number">6</span>],[ <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>]])</span><br></pre></td></tr></table></figure>

<h6 id="4-除法"><a href="#4-除法" class="headerlink" title="4.除法"></a>4.除法</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In: a/<span class="number">2</span></span><br><span class="line">Out:array([[ <span class="number">0.5</span>,  <span class="number">1.</span> ,  <span class="number">1.5</span>],[ <span class="number">2.</span> ,  <span class="number">2.5</span>,  <span class="number">3.</span> ]])</span><br></pre></td></tr></table></figure>

<h6 id="5-求余"><a href="#5-求余" class="headerlink" title="5.求余"></a>5.求余</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In:a%<span class="number">2</span></span><br><span class="line">Out:array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]])</span><br></pre></td></tr></table></figure>

<h6 id="6-矩阵转置"><a href="#6-矩阵转置" class="headerlink" title="6.矩阵转置"></a>6.矩阵转置</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In:a.T</span><br><span class="line">Out:array([[<span class="number">1</span>, <span class="number">4</span>],[<span class="number">2</span>, <span class="number">5</span>],[<span class="number">3</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure>

<h6 id="7-矩阵的逆"><a href="#7-矩阵的逆" class="headerlink" title="7.矩阵的逆"></a>7.矩阵的逆</h6><p>矩阵可逆的充要条件是矩阵满秩。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as npimport numpy.linalg as lga = np.array([[1,2,3],[4,5,6],[7,8,9]])</span><br><span class="line">In:lg.inv(a)</span><br><span class="line">Out:array([[  3.15251974e+15,  -6.30503948e+15,   3.15251974e+15],[ -6.30503948e+15,   1.26100790e+16,  -6.30503948e+15],[  3.15251974e+15,  -6.30503948e+15,   3.15251974e+15]])</span><br></pre></td></tr></table></figure>

<h2 id="9-numpy中的常用统计函数："><a href="#9-numpy中的常用统计函数：" class="headerlink" title="9.numpy中的常用统计函数："></a>9.numpy中的常用统计函数：</h2><p>求和：t.sum(axis=None)</p>
<p>均值：t.mean(a,axis=None)  </p>
<p>受离群点的影响较大 中值：np.median(t,axis=None)</p>
<p>最大值：t.max(axis=None)</p>
<p>最小值：t.min(axis=None)</p>
<p>极值：np.ptp(t,axis=None) 即最大值和最小值只差</p>
<p>标准差：t.std(axis=None)</p>
<h2 id="10-数组的折叠"><a href="#10-数组的折叠" class="headerlink" title="10.数组的折叠"></a>10.数组的折叠</h2><p>从深度看，数组既可以横向叠放，也可以竖向叠放。因此，我们我们对数组进行堆叠，<code>Numpy</code>数组对堆叠包含以下几个函数： 首先，创建两个数组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In: a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">In: a</span><br><span class="line">Out: array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line">In: b = a*<span class="number">2</span></span><br><span class="line">In: b</span><br><span class="line">Out: array([[ <span class="number">0</span>,  <span class="number">2</span>,  <span class="number">4</span>],       [ <span class="number">6</span>,  <span class="number">8</span>, <span class="number">10</span>],       [<span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>]])</span><br></pre></td></tr></table></figure>

<h5 id="hstack"><a href="#hstack" class="headerlink" title="hstack()"></a>hstack()</h5><p>水平叠加。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In: np.hstack((a,b))  <span class="comment"># 注意 这里是两层括号</span></span><br><span class="line">Out: array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">0</span>,  <span class="number">2</span>,  <span class="number">4</span>],       [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">8</span>, <span class="number">10</span>],       [ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>]])</span><br></pre></td></tr></table></figure>

<h5 id="vstack"><a href="#vstack" class="headerlink" title="vstack()"></a>vstack()</h5><p>垂直叠加。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In: np.vstack((a,b))</span><br><span class="line">Out:array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],       [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],       [ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],       [ <span class="number">0</span>,  <span class="number">2</span>,  <span class="number">4</span>],       [ <span class="number">6</span>,  <span class="number">8</span>, <span class="number">10</span>],       [<span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>]])</span><br></pre></td></tr></table></figure>

<h5 id="dstack"><a href="#dstack" class="headerlink" title="dstack()"></a>dstack()</h5><p>深度叠加。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In: np.dstack((a,b))</span><br><span class="line">Out: array([[[ <span class="number">0</span>,  <span class="number">0</span>],        [ <span class="number">1</span>,  <span class="number">2</span>],        [ <span class="number">2</span>,  <span class="number">4</span>]],       [[ <span class="number">3</span>,  <span class="number">6</span>],        [ <span class="number">4</span>,  <span class="number">8</span>],        [ <span class="number">5</span>, <span class="number">10</span>]],       [[ <span class="number">6</span>, <span class="number">12</span>],        [ <span class="number">7</span>, <span class="number">14</span>],        [ <span class="number">8</span>, <span class="number">16</span>]]])</span><br></pre></td></tr></table></figure>

<h2 id="11-数组的拆分"><a href="#11-数组的拆分" class="headerlink" title="11.数组的拆分"></a>11.数组的拆分</h2><p>使用<code>Numpy</code>，我们可以方便的对数组进行拆分，比如使用<code>hsplit()</code>、<code>vsplit()</code>、<code>dsplit()</code>、<code>split()</code>函数等。</p>
<h4 id="拆分数组"><a href="#拆分数组" class="headerlink" title="拆分数组"></a>拆分数组</h4><p>准备数组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">In: a= np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">In: a</span><br><span class="line">Out: array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure>

<h5 id="hsplit"><a href="#hsplit" class="headerlink" title="hsplit()"></a>hsplit()</h5><p>横向拆分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In: np.hsplit(a,<span class="number">3</span>)</span><br><span class="line">    Out:[array([[<span class="number">0</span>],[<span class="number">3</span>], [<span class="number">6</span>]]),     .  array([[<span class="number">1</span>], [<span class="number">4</span>],[<span class="number">7</span>]]),        array([[<span class="number">2</span>],[<span class="number">5</span>], [<span class="number">8</span>]])]</span><br></pre></td></tr></table></figure>

<h5 id="vsplit"><a href="#vsplit" class="headerlink" title="vsplit()"></a>vsplit()</h5><p>纵向拆分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In: np.vsplit(a,<span class="number">3</span>)</span><br><span class="line">Out: [array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]]), array([[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]]), array([[<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])]</span><br></pre></td></tr></table></figure>

<h5 id="dsplit"><a href="#dsplit" class="headerlink" title="dsplit()"></a>dsplit()</h5><p>深度拆分。 深度拆分要求数组的秩大于等于<code>3</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c= np.arange(<span class="number">27</span>).reshape(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">In: np.dsplit(c,<span class="number">3</span>)</span><br><span class="line">Out:[array([[[ <span class="number">0</span>],         [ <span class="number">3</span>],         [ <span class="number">6</span>]],        [[ <span class="number">9</span>],         [<span class="number">12</span>],         [<span class="number">15</span>]],        [[<span class="number">18</span>],         [<span class="number">21</span>],         [<span class="number">24</span>]]]), array([[[ <span class="number">1</span>],         [ <span class="number">4</span>],         [ <span class="number">7</span>]],        [[<span class="number">10</span>],         [<span class="number">13</span>],         [<span class="number">16</span>]],        [[<span class="number">19</span>],         [<span class="number">22</span>],         [<span class="number">25</span>]]]), array([[[ <span class="number">2</span>],         [ <span class="number">5</span>],         [ <span class="number">8</span>]],        [[<span class="number">11</span>],         [<span class="number">14</span>],         [<span class="number">17</span>]],        [[<span class="number">20</span>],         [<span class="number">23</span>],         [<span class="number">26</span>]]])]</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度</title>
    <url>/2022/01/17/%E9%AB%98%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>高精度运算</p>
<span id="more"></span>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a ;<span class="comment">//数据类型的范围：-2^31~2^31-1,数量级为10^9</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ;<span class="comment">//数据类型范围：-2^63~2^63-1,数量级为10^18</span></span><br><span class="line"><span class="comment">//由于进行较大的数运算时，无法用Int 和long long 所以下面需要学习高精度</span></span><br></pre></td></tr></table></figure>

<h2 id="一-高精度的加法"><a href="#一-高精度的加法" class="headerlink" title="一.高精度的加法"></a>一.高精度的加法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//算法核心；</span></span><br><span class="line">c[i]+=a[i]+b[i];</span><br><span class="line">c[i+<span class="number">1</span>]=c[i]/<span class="number">10</span>;</span><br><span class="line">c[i]=c[i]%<span class="number">10</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">505</span>],b[<span class="number">505</span>],c[<span class="number">505</span>];</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">505</span>],s2[<span class="number">505</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> la,lb,lc,i;</span><br><span class="line">	cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">	la=<span class="built_in">strlen</span>(s1);</span><br><span class="line">	lb=<span class="built_in">strlen</span>(s2);<span class="comment">//从s[0]开始储存 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;la;i++)</span><br><span class="line">	 a[la-i]=s1[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//将字符转换成数字，并将字符转置便于计算 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;lb;i++)</span><br><span class="line">	 b[lb-i]=s2[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//将字符转换成数字，并将字符转置便于计算 </span></span><br><span class="line">	lc=<span class="built_in">max</span>(la,lb)+<span class="number">1</span>;<span class="comment">//新数组的长度</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=lc;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		c[i]+=a[i]+b[i];</span><br><span class="line">		c[i+<span class="number">1</span>]=c[i]/<span class="number">10</span>;</span><br><span class="line">		c[i]=c[i]%<span class="number">10</span>; </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span>(c[lc]==<span class="number">0</span> &amp;&amp; lc&gt;<span class="number">0</span>) lc--;<span class="comment">//删除前导零,同时lc的长度不能为0，所以要求lc&gt;0 || lc&gt;=1 </span></span><br><span class="line">	<span class="keyword">for</span>(i=lc;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">	 cout&lt;&lt;c[i]; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h2 id="二-高精度的减法"><a href="#二-高精度的减法" class="headerlink" title="二.高精度的减法"></a>二.高精度的减法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//核心代码</span></span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;b[i])<span class="comment">//如果该位的数小，需要向高位借位，那么高位将会减一，因为是十进制，所以地位会加10，然后再进行加法</span></span><br><span class="line">&#123;</span><br><span class="line">    c[i+<span class="number">1</span>]--;</span><br><span class="line">    c[i]+=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">c[i]=a[i]-b[i];</span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10086</span>],b[<span class="number">10086</span>],c[<span class="number">10086</span>];</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">10086</span>],s2[<span class="number">10086</span>],s3[<span class="number">10086</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">char</span> s1[],<span class="keyword">char</span> s2[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m=<span class="built_in">strlen</span>(s1),n=<span class="built_in">strlen</span>(s2);</span><br><span class="line">	<span class="keyword">if</span>(m!=n) <span class="keyword">return</span> m&gt;n;<span class="comment">//不同长度 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="comment">//同等长度下 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(s1[i]!=s2[i]) <span class="keyword">return</span> s1[i]&gt;s2[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> la,lb,lc,i,flag;</span><br><span class="line">	cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">	<span class="keyword">if</span>(!<span class="built_in">compare</span>(s1,s2))<span class="comment">//ifcompare(s1,s2)为false才会执行,此时s1&lt;s2,需要交换 </span></span><br><span class="line">	&#123;</span><br><span class="line">		flag=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">strcpy</span>(s3,s1);</span><br><span class="line">		<span class="built_in">strcpy</span>(s1,s2);</span><br><span class="line">		<span class="built_in">strcpy</span>(s2,s3);</span><br><span class="line">	&#125;</span><br><span class="line">	la=<span class="built_in">strlen</span>(s1);</span><br><span class="line">	lb=<span class="built_in">strlen</span>(s2);<span class="comment">//从s[0]开始储存 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;la;i++)</span><br><span class="line">	    a[la-i]=s1[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//将字符转换成数字，并将字符转置便于计算 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;lb;i++)</span><br><span class="line">	    b[lb-i]=s2[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	lc=<span class="built_in">max</span>(la,lb);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=lc;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line">		&#123;</span><br><span class="line">			a[i+<span class="number">1</span>]--;</span><br><span class="line">			a[i]+=<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		c[i]=a[i]-b[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(c[lc]==<span class="number">0</span> &amp;&amp; lc&gt;<span class="number">1</span>) lc--;</span><br><span class="line">	<span class="keyword">if</span>(flag==<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=lc;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">	 cout&lt;&lt;c[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="三-高精度的乘法"><a href="#三-高精度的乘法" class="headerlink" title="三.高精度的乘法"></a>三.高精度的乘法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//核心算法</span></span><br><span class="line">c[i+j<span class="number">-1</span>] +=a[i]*a[j];</span><br><span class="line">c[i+j] +=c[i+j<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">c[i+j<span class="number">-1</span>] %=<span class="number">10</span>; </span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2005</span>],b[<span class="number">2005</span>],c[<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">2005</span>],s2[<span class="number">2005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> la,lb,lc,i;</span><br><span class="line">	cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">	la=<span class="built_in">strlen</span>(s1);</span><br><span class="line">	lb=<span class="built_in">strlen</span>(s2);<span class="comment">//从s[0]开始储存 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;la;i++)</span><br><span class="line">	    a[la-i]=s1[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//将字符转换成数字，并将字符转置便于计算 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;lb;i++)</span><br><span class="line">	    b[lb-i]=s2[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	lc=la+lb;<span class="comment">//最长的长度小于等于两数长度之和 </span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=la;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lb;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			c[i+j<span class="number">-1</span>] +=a[i]*a[j];</span><br><span class="line">			c[i+j] +=c[i+j<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">			c[i+j<span class="number">-1</span>] %=<span class="number">10</span>; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span>(c[lc]==<span class="number">0</span> &amp;&amp; lc&gt;<span class="number">0</span>) lc--;</span><br><span class="line">	<span class="keyword">for</span>(i=lc;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">	 cout&lt;&lt;c[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四-高精度除法"><a href="#四-高精度除法" class="headerlink" title="四.高精度除法"></a>四.高精度除法</h2><h3 id="高精度除以低精度"><a href="#高精度除以低精度" class="headerlink" title="高精度除以低精度"></a>高精度除以低精度</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//核心代码</span></span><br><span class="line">c[i]=(x*<span class="number">10</span>+a[i])/b;</span><br><span class="line">x=(x*<span class="number">10</span>+a[i])%b;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b,c[<span class="number">5005</span>],x,a[<span class="number">5005</span>],la,lc;</span><br><span class="line"><span class="comment">//高精度除以低精度 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;s1&gt;&gt;b;<span class="comment">//读入被除数和除数</span></span><br><span class="line">	la=<span class="built_in">strlen</span>(s1);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=la;i++)<span class="comment">//将被除数一位一位放入数组 </span></span><br><span class="line">	 a[i]=s1[i<span class="number">-1</span>]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=la;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		c[i]=(x*<span class="number">10</span>+a[i])/b;<span class="comment">//得到可以整除的后的整数</span></span><br><span class="line">		x=(x*<span class="number">10</span>+a[i])%b;<span class="comment">//为了得到余数</span></span><br><span class="line">	&#125;</span><br><span class="line">	lc=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(c[lc]==<span class="number">0</span> &amp;&amp; lc&lt;la) lc++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=lc;i&lt;=la;i++)</span><br><span class="line">	 cout&lt;&lt;c[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高精度除以高精度"><a href="#高精度除以高精度" class="headerlink" title="高精度除以高精度"></a>高精度除以高精度</h3><p>完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">305</span>],s2[<span class="number">305</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">305</span>],b[<span class="number">305</span>],c[<span class="number">305</span>],tmp[<span class="number">305</span>];<span class="comment">//a为被除数，b为除数，c为商 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> s[<span class="number">305</span>];</span><br><span class="line">	cin&gt;&gt;s;</span><br><span class="line">	x[<span class="number">0</span>]=<span class="built_in">strlen</span>(s);<span class="comment">//为字符串的长度 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x[<span class="number">0</span>];i++)</span><br><span class="line">	&#123;</span><br><span class="line">		x[x[<span class="number">0</span>]-i]=s[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//为了便于计算，将字符串转换为数字，并且倒序储存 </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=a[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--) cout&lt;&lt;a[i];</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//返回1代表a&gt;b，返回0代表a=b。返回-1代表a&lt;b </span></span><br><span class="line">	<span class="keyword">if</span>(a[<span class="number">0</span>]&gt;b[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(a[<span class="number">0</span>]&lt;b[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=a[<span class="number">0</span>];i&gt;<span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]&gt;b[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(a[i]&lt;b[i]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">minu</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span><span class="comment">//进行相减 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line">		&#123;</span><br><span class="line">			a[i+<span class="number">1</span>]--;</span><br><span class="line">			a[i]+=<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		a[i]=a[i]-b[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(a[a[<span class="number">0</span>]]==<span class="number">0</span> &amp;&amp; a[<span class="number">0</span>]&gt;<span class="number">0</span>) a[<span class="number">0</span>]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">numcpy</span><span class="params">(<span class="keyword">int</span> p[],<span class="keyword">int</span> q[],<span class="keyword">int</span> n)</span><span class="comment">//将p数组整体移动n位到q数组中 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p[<span class="number">0</span>];i++) q[i+n<span class="number">-1</span>]=p[i];</span><br><span class="line">	q[<span class="number">0</span>]=p[<span class="number">0</span>]+n<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>(a);<span class="comment">//输入a</span></span><br><span class="line">	<span class="built_in">init</span>(b);<span class="comment">//输入b</span></span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	c[<span class="number">0</span>]=a[<span class="number">0</span>]-b[<span class="number">0</span>]+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=c[<span class="number">0</span>];i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(tmp));</span><br><span class="line">		<span class="built_in">numcpy</span>(b,tmp,i);</span><br><span class="line">		<span class="keyword">while</span>(<span class="built_in">compare</span>(a,tmp)&gt;=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			c[i]++;</span><br><span class="line">			<span class="built_in">minu</span>(a,tmp);</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">while</span>(c[c[<span class="number">0</span>]]==<span class="number">0</span> &amp;&amp; c[<span class="number">0</span>]&gt;<span class="number">0</span>) c[<span class="number">0</span>]--;</span><br><span class="line">	<span class="built_in">print</span>(c);</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	<span class="built_in">print</span>(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>文章分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
